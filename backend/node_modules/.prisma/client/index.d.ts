
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model detalle_articulos
 * 
 */
export type detalle_articulos = $Result.DefaultSelection<Prisma.$detalle_articulosPayload>
/**
 * Model aprobado_por
 * 
 */
export type aprobado_por = $Result.DefaultSelection<Prisma.$aprobado_porPayload>
/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model institucion
 * 
 */
export type institucion = $Result.DefaultSelection<Prisma.$institucionPayload>
/**
 * Model historial_operaciones
 * 
 */
export type historial_operaciones = $Result.DefaultSelection<Prisma.$historial_operacionesPayload>
/**
 * Model inventario
 * 
 */
export type inventario = $Result.DefaultSelection<Prisma.$inventarioPayload>
/**
 * Model consignaciones
 * 
 */
export type consignaciones = $Result.DefaultSelection<Prisma.$consignacionesPayload>
/**
 * Model factura
 * 
 */
export type factura = $Result.DefaultSelection<Prisma.$facturaPayload>
/**
 * Model cotizaciones
 * 
 */
export type cotizaciones = $Result.DefaultSelection<Prisma.$cotizacionesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.institucion`: Exposes CRUD operations for the **institucion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institucions
    * const institucions = await prisma.institucion.findMany()
    * ```
    */
  get institucion(): Prisma.institucionDelegate<ExtArgs>;

  /**
   * `prisma.historial_operaciones`: Exposes CRUD operations for the **historial_operaciones** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historial_operaciones
    * const historial_operaciones = await prisma.historial_operaciones.findMany()
    * ```
    */
  get historial_operaciones(): Prisma.historial_operacionesDelegate<ExtArgs>;

  /**
   * `prisma.inventario`: Exposes CRUD operations for the **inventario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventarios
    * const inventarios = await prisma.inventario.findMany()
    * ```
    */
  get inventario(): Prisma.inventarioDelegate<ExtArgs>;

  /**
   * `prisma.consignaciones`: Exposes CRUD operations for the **consignaciones** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consignaciones
    * const consignaciones = await prisma.consignaciones.findMany()
    * ```
    */
  get consignaciones(): Prisma.consignacionesDelegate<ExtArgs>;

  /**
   * `prisma.factura`: Exposes CRUD operations for the **factura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Facturas
    * const facturas = await prisma.factura.findMany()
    * ```
    */
  get factura(): Prisma.facturaDelegate<ExtArgs>;

  /**
   * `prisma.cotizaciones`: Exposes CRUD operations for the **cotizaciones** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cotizaciones
    * const cotizaciones = await prisma.cotizaciones.findMany()
    * ```
    */
  get cotizaciones(): Prisma.cotizacionesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usuario: 'usuario',
    institucion: 'institucion',
    historial_operaciones: 'historial_operaciones',
    inventario: 'inventario',
    consignaciones: 'consignaciones',
    factura: 'factura',
    cotizaciones: 'cotizaciones'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'institucion' | 'historial_operaciones' | 'inventario' | 'consignaciones' | 'factura' | 'cotizaciones'
      txIsolationLevel: never
    },
    model: {
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.usuarioFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.usuarioAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      institucion: {
        payload: Prisma.$institucionPayload<ExtArgs>
        fields: Prisma.institucionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.institucionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.institucionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>
          }
          findFirst: {
            args: Prisma.institucionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.institucionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>
          }
          findMany: {
            args: Prisma.institucionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>[]
          }
          create: {
            args: Prisma.institucionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>
          }
          createMany: {
            args: Prisma.institucionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.institucionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>
          }
          update: {
            args: Prisma.institucionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>
          }
          deleteMany: {
            args: Prisma.institucionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.institucionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.institucionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$institucionPayload>
          }
          aggregate: {
            args: Prisma.InstitucionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInstitucion>
          }
          groupBy: {
            args: Prisma.institucionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InstitucionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.institucionFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.institucionAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.institucionCountArgs<ExtArgs>,
            result: $Utils.Optional<InstitucionCountAggregateOutputType> | number
          }
        }
      }
      historial_operaciones: {
        payload: Prisma.$historial_operacionesPayload<ExtArgs>
        fields: Prisma.historial_operacionesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.historial_operacionesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.historial_operacionesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>
          }
          findFirst: {
            args: Prisma.historial_operacionesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.historial_operacionesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>
          }
          findMany: {
            args: Prisma.historial_operacionesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>[]
          }
          create: {
            args: Prisma.historial_operacionesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>
          }
          createMany: {
            args: Prisma.historial_operacionesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.historial_operacionesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>
          }
          update: {
            args: Prisma.historial_operacionesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>
          }
          deleteMany: {
            args: Prisma.historial_operacionesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.historial_operacionesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.historial_operacionesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$historial_operacionesPayload>
          }
          aggregate: {
            args: Prisma.Historial_operacionesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistorial_operaciones>
          }
          groupBy: {
            args: Prisma.historial_operacionesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Historial_operacionesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.historial_operacionesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.historial_operacionesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.historial_operacionesCountArgs<ExtArgs>,
            result: $Utils.Optional<Historial_operacionesCountAggregateOutputType> | number
          }
        }
      }
      inventario: {
        payload: Prisma.$inventarioPayload<ExtArgs>
        fields: Prisma.inventarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.inventarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.inventarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>
          }
          findFirst: {
            args: Prisma.inventarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.inventarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>
          }
          findMany: {
            args: Prisma.inventarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>[]
          }
          create: {
            args: Prisma.inventarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>
          }
          createMany: {
            args: Prisma.inventarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.inventarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>
          }
          update: {
            args: Prisma.inventarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>
          }
          deleteMany: {
            args: Prisma.inventarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.inventarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.inventarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$inventarioPayload>
          }
          aggregate: {
            args: Prisma.InventarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInventario>
          }
          groupBy: {
            args: Prisma.inventarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InventarioGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.inventarioFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.inventarioAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.inventarioCountArgs<ExtArgs>,
            result: $Utils.Optional<InventarioCountAggregateOutputType> | number
          }
        }
      }
      consignaciones: {
        payload: Prisma.$consignacionesPayload<ExtArgs>
        fields: Prisma.consignacionesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.consignacionesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.consignacionesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>
          }
          findFirst: {
            args: Prisma.consignacionesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.consignacionesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>
          }
          findMany: {
            args: Prisma.consignacionesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>[]
          }
          create: {
            args: Prisma.consignacionesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>
          }
          createMany: {
            args: Prisma.consignacionesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.consignacionesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>
          }
          update: {
            args: Prisma.consignacionesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>
          }
          deleteMany: {
            args: Prisma.consignacionesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.consignacionesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.consignacionesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consignacionesPayload>
          }
          aggregate: {
            args: Prisma.ConsignacionesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConsignaciones>
          }
          groupBy: {
            args: Prisma.consignacionesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConsignacionesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.consignacionesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.consignacionesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.consignacionesCountArgs<ExtArgs>,
            result: $Utils.Optional<ConsignacionesCountAggregateOutputType> | number
          }
        }
      }
      factura: {
        payload: Prisma.$facturaPayload<ExtArgs>
        fields: Prisma.facturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.facturaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.facturaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>
          }
          findFirst: {
            args: Prisma.facturaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.facturaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>
          }
          findMany: {
            args: Prisma.facturaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>[]
          }
          create: {
            args: Prisma.facturaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>
          }
          createMany: {
            args: Prisma.facturaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.facturaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>
          }
          update: {
            args: Prisma.facturaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>
          }
          deleteMany: {
            args: Prisma.facturaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.facturaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.facturaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$facturaPayload>
          }
          aggregate: {
            args: Prisma.FacturaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFactura>
          }
          groupBy: {
            args: Prisma.facturaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FacturaGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.facturaFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.facturaAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.facturaCountArgs<ExtArgs>,
            result: $Utils.Optional<FacturaCountAggregateOutputType> | number
          }
        }
      }
      cotizaciones: {
        payload: Prisma.$cotizacionesPayload<ExtArgs>
        fields: Prisma.cotizacionesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cotizacionesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cotizacionesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>
          }
          findFirst: {
            args: Prisma.cotizacionesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cotizacionesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>
          }
          findMany: {
            args: Prisma.cotizacionesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>[]
          }
          create: {
            args: Prisma.cotizacionesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>
          }
          createMany: {
            args: Prisma.cotizacionesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cotizacionesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>
          }
          update: {
            args: Prisma.cotizacionesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>
          }
          deleteMany: {
            args: Prisma.cotizacionesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cotizacionesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cotizacionesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cotizacionesPayload>
          }
          aggregate: {
            args: Prisma.CotizacionesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCotizaciones>
          }
          groupBy: {
            args: Prisma.cotizacionesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CotizacionesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.cotizacionesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.cotizacionesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.cotizacionesCountArgs<ExtArgs>,
            result: $Utils.Optional<CotizacionesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    historial_operaciones: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historial_operaciones?: boolean | UsuarioCountOutputTypeCountHistorial_operacionesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountHistorial_operacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historial_operacionesWhereInput
  }


  /**
   * Count Type InstitucionCountOutputType
   */

  export type InstitucionCountOutputType = {
    consignaciones: number
    factura: number
    cotizaciones: number
  }

  export type InstitucionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consignaciones?: boolean | InstitucionCountOutputTypeCountConsignacionesArgs
    factura?: boolean | InstitucionCountOutputTypeCountFacturaArgs
    cotizaciones?: boolean | InstitucionCountOutputTypeCountCotizacionesArgs
  }

  // Custom InputTypes
  /**
   * InstitucionCountOutputType without action
   */
  export type InstitucionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitucionCountOutputType
     */
    select?: InstitucionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstitucionCountOutputType without action
   */
  export type InstitucionCountOutputTypeCountConsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consignacionesWhereInput
  }

  /**
   * InstitucionCountOutputType without action
   */
  export type InstitucionCountOutputTypeCountFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: facturaWhereInput
  }

  /**
   * InstitucionCountOutputType without action
   */
  export type InstitucionCountOutputTypeCountCotizacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cotizacionesWhereInput
  }


  /**
   * Count Type InventarioCountOutputType
   */

  export type InventarioCountOutputType = {
    consignaciones: number
  }

  export type InventarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consignaciones?: boolean | InventarioCountOutputTypeCountConsignacionesArgs
  }

  // Custom InputTypes
  /**
   * InventarioCountOutputType without action
   */
  export type InventarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventarioCountOutputType
     */
    select?: InventarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventarioCountOutputType without action
   */
  export type InventarioCountOutputTypeCountConsignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consignacionesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model detalle_articulos
   */





  export type detalle_articulosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_inventario?: boolean
    cantidad?: boolean
    precio_unitario?: boolean
    precio_total?: boolean
  }, ExtArgs["result"]["detalle_articulos"]>

  export type detalle_articulosSelectScalar = {
    id_inventario?: boolean
    cantidad?: boolean
    precio_unitario?: boolean
    precio_total?: boolean
  }



  export type $detalle_articulosPayload = {
    name: "detalle_articulos"
    objects: {}
    scalars: {
      id_inventario: string
      cantidad: string
      precio_unitario: string
      precio_total: string
    }
    composites: {}
  }


  type detalle_articulosGetPayload<S extends boolean | null | undefined | detalle_articulosDefaultArgs> = $Result.GetResult<Prisma.$detalle_articulosPayload, S>





  /**
   * Fields of the detalle_articulos model
   */ 
  interface detalle_articulosFieldRefs {
    readonly id_inventario: FieldRef<"detalle_articulos", 'String'>
    readonly cantidad: FieldRef<"detalle_articulos", 'String'>
    readonly precio_unitario: FieldRef<"detalle_articulos", 'String'>
    readonly precio_total: FieldRef<"detalle_articulos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * detalle_articulos without action
   */
  export type detalle_articulosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the detalle_articulos
     */
    select?: detalle_articulosSelect<ExtArgs> | null
  }


  /**
   * Model aprobado_por
   */





  export type aprobado_porSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    nombre?: boolean
    fecha_aprobacion?: boolean
  }, ExtArgs["result"]["aprobado_por"]>

  export type aprobado_porSelectScalar = {
    id_usuario?: boolean
    nombre?: boolean
    fecha_aprobacion?: boolean
  }



  export type $aprobado_porPayload = {
    name: "aprobado_por"
    objects: {}
    scalars: {
      id_usuario: string
      nombre: string
      fecha_aprobacion: Date
    }
    composites: {}
  }


  type aprobado_porGetPayload<S extends boolean | null | undefined | aprobado_porDefaultArgs> = $Result.GetResult<Prisma.$aprobado_porPayload, S>





  /**
   * Fields of the aprobado_por model
   */ 
  interface aprobado_porFieldRefs {
    readonly id_usuario: FieldRef<"aprobado_por", 'String'>
    readonly nombre: FieldRef<"aprobado_por", 'String'>
    readonly fecha_aprobacion: FieldRef<"aprobado_por", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * aprobado_por without action
   */
  export type aprobado_porDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aprobado_por
     */
    select?: aprobado_porSelect<ExtArgs> | null
  }


  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    email: string | null
    rol: string | null
    nombre: string | null
    apellido: string | null
    contrasena: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    email: string | null
    rol: string | null
    nombre: string | null
    apellido: string | null
    contrasena: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    email: number
    rol: number
    nombre: number
    apellido: number
    contrasena: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    email?: true
    rol?: true
    nombre?: true
    apellido?: true
    contrasena?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    email?: true
    rol?: true
    nombre?: true
    apellido?: true
    contrasena?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    email?: true
    rol?: true
    nombre?: true
    apellido?: true
    contrasena?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    email: string
    rol: string | null
    nombre: string
    apellido: string
    contrasena: string
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    rol?: boolean
    nombre?: boolean
    apellido?: boolean
    contrasena?: boolean
    historial_operaciones?: boolean | usuario$historial_operacionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    id?: boolean
    email?: boolean
    rol?: boolean
    nombre?: boolean
    apellido?: boolean
    contrasena?: boolean
  }


  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historial_operaciones?: boolean | usuario$historial_operacionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      historial_operaciones: Prisma.$historial_operacionesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      rol: string | null
      nombre: string
      apellido: string
      contrasena: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * @param {usuarioFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const usuario = await prisma.usuario.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: usuarioFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Usuario.
     * @param {usuarioAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const usuario = await prisma.usuario.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: usuarioAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    historial_operaciones<T extends usuario$historial_operacionesArgs<ExtArgs> = {}>(args?: Subset<T, usuario$historial_operacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id: FieldRef<"usuario", 'String'>
    readonly email: FieldRef<"usuario", 'String'>
    readonly rol: FieldRef<"usuario", 'String'>
    readonly nombre: FieldRef<"usuario", 'String'>
    readonly apellido: FieldRef<"usuario", 'String'>
    readonly contrasena: FieldRef<"usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }

  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
  }

  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }

  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario findRaw
   */
  export type usuarioFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * usuario aggregateRaw
   */
  export type usuarioAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * usuario.historial_operaciones
   */
  export type usuario$historial_operacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    where?: historial_operacionesWhereInput
    orderBy?: historial_operacionesOrderByWithRelationInput | historial_operacionesOrderByWithRelationInput[]
    cursor?: historial_operacionesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Historial_operacionesScalarFieldEnum | Historial_operacionesScalarFieldEnum[]
  }

  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
  }


  /**
   * Model institucion
   */

  export type AggregateInstitucion = {
    _count: InstitucionCountAggregateOutputType | null
    _avg: InstitucionAvgAggregateOutputType | null
    _sum: InstitucionSumAggregateOutputType | null
    _min: InstitucionMinAggregateOutputType | null
    _max: InstitucionMaxAggregateOutputType | null
  }

  export type InstitucionAvgAggregateOutputType = {
    porcentaje_descuento: number | null
  }

  export type InstitucionSumAggregateOutputType = {
    porcentaje_descuento: number | null
  }

  export type InstitucionMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    contacto_principal: string | null
    tel_contacto_principal: string | null
    contacto_secundario: string | null
    tel_contacto_secundario: string | null
    porcentaje_descuento: number | null
  }

  export type InstitucionMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    contacto_principal: string | null
    tel_contacto_principal: string | null
    contacto_secundario: string | null
    tel_contacto_secundario: string | null
    porcentaje_descuento: number | null
  }

  export type InstitucionCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    contacto_principal: number
    tel_contacto_principal: number
    contacto_secundario: number
    tel_contacto_secundario: number
    porcentaje_descuento: number
    _all: number
  }


  export type InstitucionAvgAggregateInputType = {
    porcentaje_descuento?: true
  }

  export type InstitucionSumAggregateInputType = {
    porcentaje_descuento?: true
  }

  export type InstitucionMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    contacto_principal?: true
    tel_contacto_principal?: true
    contacto_secundario?: true
    tel_contacto_secundario?: true
    porcentaje_descuento?: true
  }

  export type InstitucionMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    contacto_principal?: true
    tel_contacto_principal?: true
    contacto_secundario?: true
    tel_contacto_secundario?: true
    porcentaje_descuento?: true
  }

  export type InstitucionCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    contacto_principal?: true
    tel_contacto_principal?: true
    contacto_secundario?: true
    tel_contacto_secundario?: true
    porcentaje_descuento?: true
    _all?: true
  }

  export type InstitucionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which institucion to aggregate.
     */
    where?: institucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institucions to fetch.
     */
    orderBy?: institucionOrderByWithRelationInput | institucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: institucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institucions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned institucions
    **/
    _count?: true | InstitucionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstitucionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstitucionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitucionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitucionMaxAggregateInputType
  }

  export type GetInstitucionAggregateType<T extends InstitucionAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitucion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitucion[P]>
      : GetScalarType<T[P], AggregateInstitucion[P]>
  }




  export type institucionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: institucionWhereInput
    orderBy?: institucionOrderByWithAggregationInput | institucionOrderByWithAggregationInput[]
    by: InstitucionScalarFieldEnum[] | InstitucionScalarFieldEnum
    having?: institucionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitucionCountAggregateInputType | true
    _avg?: InstitucionAvgAggregateInputType
    _sum?: InstitucionSumAggregateInputType
    _min?: InstitucionMinAggregateInputType
    _max?: InstitucionMaxAggregateInputType
  }

  export type InstitucionGroupByOutputType = {
    id: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario: string | null
    tel_contacto_secundario: string | null
    porcentaje_descuento: number | null
    _count: InstitucionCountAggregateOutputType | null
    _avg: InstitucionAvgAggregateOutputType | null
    _sum: InstitucionSumAggregateOutputType | null
    _min: InstitucionMinAggregateOutputType | null
    _max: InstitucionMaxAggregateOutputType | null
  }

  type GetInstitucionGroupByPayload<T extends institucionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitucionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitucionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitucionGroupByOutputType[P]>
            : GetScalarType<T[P], InstitucionGroupByOutputType[P]>
        }
      >
    >


  export type institucionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    contacto_principal?: boolean
    tel_contacto_principal?: boolean
    contacto_secundario?: boolean
    tel_contacto_secundario?: boolean
    porcentaje_descuento?: boolean
    consignaciones?: boolean | institucion$consignacionesArgs<ExtArgs>
    factura?: boolean | institucion$facturaArgs<ExtArgs>
    cotizaciones?: boolean | institucion$cotizacionesArgs<ExtArgs>
    _count?: boolean | InstitucionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institucion"]>

  export type institucionSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    contacto_principal?: boolean
    tel_contacto_principal?: boolean
    contacto_secundario?: boolean
    tel_contacto_secundario?: boolean
    porcentaje_descuento?: boolean
  }


  export type institucionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consignaciones?: boolean | institucion$consignacionesArgs<ExtArgs>
    factura?: boolean | institucion$facturaArgs<ExtArgs>
    cotizaciones?: boolean | institucion$cotizacionesArgs<ExtArgs>
    _count?: boolean | InstitucionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $institucionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "institucion"
    objects: {
      consignaciones: Prisma.$consignacionesPayload<ExtArgs>[]
      factura: Prisma.$facturaPayload<ExtArgs>[]
      cotizaciones: Prisma.$cotizacionesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      direccion: string
      contacto_principal: string
      tel_contacto_principal: string
      contacto_secundario: string | null
      tel_contacto_secundario: string | null
      porcentaje_descuento: number | null
    }, ExtArgs["result"]["institucion"]>
    composites: {}
  }


  type institucionGetPayload<S extends boolean | null | undefined | institucionDefaultArgs> = $Result.GetResult<Prisma.$institucionPayload, S>

  type institucionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<institucionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstitucionCountAggregateInputType | true
    }

  export interface institucionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['institucion'], meta: { name: 'institucion' } }
    /**
     * Find zero or one Institucion that matches the filter.
     * @param {institucionFindUniqueArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends institucionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, institucionFindUniqueArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Institucion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {institucionFindUniqueOrThrowArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends institucionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, institucionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Institucion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {institucionFindFirstArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends institucionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, institucionFindFirstArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Institucion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {institucionFindFirstOrThrowArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends institucionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, institucionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Institucions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {institucionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Institucions
     * const institucions = await prisma.institucion.findMany()
     * 
     * // Get first 10 Institucions
     * const institucions = await prisma.institucion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const institucionWithIdOnly = await prisma.institucion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends institucionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, institucionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Institucion.
     * @param {institucionCreateArgs} args - Arguments to create a Institucion.
     * @example
     * // Create one Institucion
     * const Institucion = await prisma.institucion.create({
     *   data: {
     *     // ... data to create a Institucion
     *   }
     * })
     * 
    **/
    create<T extends institucionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, institucionCreateArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Institucions.
     *     @param {institucionCreateManyArgs} args - Arguments to create many Institucions.
     *     @example
     *     // Create many Institucions
     *     const institucion = await prisma.institucion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends institucionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, institucionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Institucion.
     * @param {institucionDeleteArgs} args - Arguments to delete one Institucion.
     * @example
     * // Delete one Institucion
     * const Institucion = await prisma.institucion.delete({
     *   where: {
     *     // ... filter to delete one Institucion
     *   }
     * })
     * 
    **/
    delete<T extends institucionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, institucionDeleteArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Institucion.
     * @param {institucionUpdateArgs} args - Arguments to update one Institucion.
     * @example
     * // Update one Institucion
     * const institucion = await prisma.institucion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends institucionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, institucionUpdateArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Institucions.
     * @param {institucionDeleteManyArgs} args - Arguments to filter Institucions to delete.
     * @example
     * // Delete a few Institucions
     * const { count } = await prisma.institucion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends institucionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, institucionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institucions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {institucionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Institucions
     * const institucion = await prisma.institucion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends institucionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, institucionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Institucion.
     * @param {institucionUpsertArgs} args - Arguments to update or create a Institucion.
     * @example
     * // Update or create a Institucion
     * const institucion = await prisma.institucion.upsert({
     *   create: {
     *     // ... data to create a Institucion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Institucion we want to update
     *   }
     * })
    **/
    upsert<T extends institucionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, institucionUpsertArgs<ExtArgs>>
    ): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Institucions that matches the filter.
     * @param {institucionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const institucion = await prisma.institucion.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: institucionFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Institucion.
     * @param {institucionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const institucion = await prisma.institucion.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: institucionAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Institucions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {institucionCountArgs} args - Arguments to filter Institucions to count.
     * @example
     * // Count the number of Institucions
     * const count = await prisma.institucion.count({
     *   where: {
     *     // ... the filter for the Institucions we want to count
     *   }
     * })
    **/
    count<T extends institucionCountArgs>(
      args?: Subset<T, institucionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitucionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Institucion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitucionAggregateArgs>(args: Subset<T, InstitucionAggregateArgs>): Prisma.PrismaPromise<GetInstitucionAggregateType<T>>

    /**
     * Group by Institucion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {institucionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends institucionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: institucionGroupByArgs['orderBy'] }
        : { orderBy?: institucionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, institucionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitucionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the institucion model
   */
  readonly fields: institucionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for institucion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__institucionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    consignaciones<T extends institucion$consignacionesArgs<ExtArgs> = {}>(args?: Subset<T, institucion$consignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findMany'> | Null>;

    factura<T extends institucion$facturaArgs<ExtArgs> = {}>(args?: Subset<T, institucion$facturaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'findMany'> | Null>;

    cotizaciones<T extends institucion$cotizacionesArgs<ExtArgs> = {}>(args?: Subset<T, institucion$cotizacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the institucion model
   */ 
  interface institucionFieldRefs {
    readonly id: FieldRef<"institucion", 'String'>
    readonly nombre: FieldRef<"institucion", 'String'>
    readonly direccion: FieldRef<"institucion", 'String'>
    readonly contacto_principal: FieldRef<"institucion", 'String'>
    readonly tel_contacto_principal: FieldRef<"institucion", 'String'>
    readonly contacto_secundario: FieldRef<"institucion", 'String'>
    readonly tel_contacto_secundario: FieldRef<"institucion", 'String'>
    readonly porcentaje_descuento: FieldRef<"institucion", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * institucion findUnique
   */
  export type institucionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * Filter, which institucion to fetch.
     */
    where: institucionWhereUniqueInput
  }

  /**
   * institucion findUniqueOrThrow
   */
  export type institucionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * Filter, which institucion to fetch.
     */
    where: institucionWhereUniqueInput
  }

  /**
   * institucion findFirst
   */
  export type institucionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * Filter, which institucion to fetch.
     */
    where?: institucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institucions to fetch.
     */
    orderBy?: institucionOrderByWithRelationInput | institucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for institucions.
     */
    cursor?: institucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institucions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of institucions.
     */
    distinct?: InstitucionScalarFieldEnum | InstitucionScalarFieldEnum[]
  }

  /**
   * institucion findFirstOrThrow
   */
  export type institucionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * Filter, which institucion to fetch.
     */
    where?: institucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institucions to fetch.
     */
    orderBy?: institucionOrderByWithRelationInput | institucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for institucions.
     */
    cursor?: institucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institucions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of institucions.
     */
    distinct?: InstitucionScalarFieldEnum | InstitucionScalarFieldEnum[]
  }

  /**
   * institucion findMany
   */
  export type institucionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * Filter, which institucions to fetch.
     */
    where?: institucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institucions to fetch.
     */
    orderBy?: institucionOrderByWithRelationInput | institucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing institucions.
     */
    cursor?: institucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institucions.
     */
    skip?: number
    distinct?: InstitucionScalarFieldEnum | InstitucionScalarFieldEnum[]
  }

  /**
   * institucion create
   */
  export type institucionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * The data needed to create a institucion.
     */
    data: XOR<institucionCreateInput, institucionUncheckedCreateInput>
  }

  /**
   * institucion createMany
   */
  export type institucionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many institucions.
     */
    data: institucionCreateManyInput | institucionCreateManyInput[]
  }

  /**
   * institucion update
   */
  export type institucionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * The data needed to update a institucion.
     */
    data: XOR<institucionUpdateInput, institucionUncheckedUpdateInput>
    /**
     * Choose, which institucion to update.
     */
    where: institucionWhereUniqueInput
  }

  /**
   * institucion updateMany
   */
  export type institucionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update institucions.
     */
    data: XOR<institucionUpdateManyMutationInput, institucionUncheckedUpdateManyInput>
    /**
     * Filter which institucions to update
     */
    where?: institucionWhereInput
  }

  /**
   * institucion upsert
   */
  export type institucionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * The filter to search for the institucion to update in case it exists.
     */
    where: institucionWhereUniqueInput
    /**
     * In case the institucion found by the `where` argument doesn't exist, create a new institucion with this data.
     */
    create: XOR<institucionCreateInput, institucionUncheckedCreateInput>
    /**
     * In case the institucion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<institucionUpdateInput, institucionUncheckedUpdateInput>
  }

  /**
   * institucion delete
   */
  export type institucionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
    /**
     * Filter which institucion to delete.
     */
    where: institucionWhereUniqueInput
  }

  /**
   * institucion deleteMany
   */
  export type institucionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which institucions to delete
     */
    where?: institucionWhereInput
  }

  /**
   * institucion findRaw
   */
  export type institucionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * institucion aggregateRaw
   */
  export type institucionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * institucion.consignaciones
   */
  export type institucion$consignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    where?: consignacionesWhereInput
    orderBy?: consignacionesOrderByWithRelationInput | consignacionesOrderByWithRelationInput[]
    cursor?: consignacionesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsignacionesScalarFieldEnum | ConsignacionesScalarFieldEnum[]
  }

  /**
   * institucion.factura
   */
  export type institucion$facturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    where?: facturaWhereInput
    orderBy?: facturaOrderByWithRelationInput | facturaOrderByWithRelationInput[]
    cursor?: facturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * institucion.cotizaciones
   */
  export type institucion$cotizacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    where?: cotizacionesWhereInput
    orderBy?: cotizacionesOrderByWithRelationInput | cotizacionesOrderByWithRelationInput[]
    cursor?: cotizacionesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CotizacionesScalarFieldEnum | CotizacionesScalarFieldEnum[]
  }

  /**
   * institucion without action
   */
  export type institucionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the institucion
     */
    select?: institucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: institucionInclude<ExtArgs> | null
  }


  /**
   * Model historial_operaciones
   */

  export type AggregateHistorial_operaciones = {
    _count: Historial_operacionesCountAggregateOutputType | null
    _min: Historial_operacionesMinAggregateOutputType | null
    _max: Historial_operacionesMaxAggregateOutputType | null
  }

  export type Historial_operacionesMinAggregateOutputType = {
    id: string | null
    accion: string | null
    fecha: Date | null
    id_usuario: string | null
    recurso: string | null
    detalle: string | null
  }

  export type Historial_operacionesMaxAggregateOutputType = {
    id: string | null
    accion: string | null
    fecha: Date | null
    id_usuario: string | null
    recurso: string | null
    detalle: string | null
  }

  export type Historial_operacionesCountAggregateOutputType = {
    id: number
    accion: number
    fecha: number
    id_usuario: number
    recurso: number
    detalle: number
    _all: number
  }


  export type Historial_operacionesMinAggregateInputType = {
    id?: true
    accion?: true
    fecha?: true
    id_usuario?: true
    recurso?: true
    detalle?: true
  }

  export type Historial_operacionesMaxAggregateInputType = {
    id?: true
    accion?: true
    fecha?: true
    id_usuario?: true
    recurso?: true
    detalle?: true
  }

  export type Historial_operacionesCountAggregateInputType = {
    id?: true
    accion?: true
    fecha?: true
    id_usuario?: true
    recurso?: true
    detalle?: true
    _all?: true
  }

  export type Historial_operacionesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historial_operaciones to aggregate.
     */
    where?: historial_operacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_operaciones to fetch.
     */
    orderBy?: historial_operacionesOrderByWithRelationInput | historial_operacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: historial_operacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_operaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_operaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned historial_operaciones
    **/
    _count?: true | Historial_operacionesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Historial_operacionesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Historial_operacionesMaxAggregateInputType
  }

  export type GetHistorial_operacionesAggregateType<T extends Historial_operacionesAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorial_operaciones]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorial_operaciones[P]>
      : GetScalarType<T[P], AggregateHistorial_operaciones[P]>
  }




  export type historial_operacionesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historial_operacionesWhereInput
    orderBy?: historial_operacionesOrderByWithAggregationInput | historial_operacionesOrderByWithAggregationInput[]
    by: Historial_operacionesScalarFieldEnum[] | Historial_operacionesScalarFieldEnum
    having?: historial_operacionesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Historial_operacionesCountAggregateInputType | true
    _min?: Historial_operacionesMinAggregateInputType
    _max?: Historial_operacionesMaxAggregateInputType
  }

  export type Historial_operacionesGroupByOutputType = {
    id: string
    accion: string
    fecha: Date
    id_usuario: string
    recurso: string
    detalle: string
    _count: Historial_operacionesCountAggregateOutputType | null
    _min: Historial_operacionesMinAggregateOutputType | null
    _max: Historial_operacionesMaxAggregateOutputType | null
  }

  type GetHistorial_operacionesGroupByPayload<T extends historial_operacionesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Historial_operacionesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Historial_operacionesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Historial_operacionesGroupByOutputType[P]>
            : GetScalarType<T[P], Historial_operacionesGroupByOutputType[P]>
        }
      >
    >


  export type historial_operacionesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accion?: boolean
    fecha?: boolean
    id_usuario?: boolean
    recurso?: boolean
    detalle?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historial_operaciones"]>

  export type historial_operacionesSelectScalar = {
    id?: boolean
    accion?: boolean
    fecha?: boolean
    id_usuario?: boolean
    recurso?: boolean
    detalle?: boolean
  }


  export type historial_operacionesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $historial_operacionesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "historial_operaciones"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accion: string
      fecha: Date
      id_usuario: string
      recurso: string
      detalle: string
    }, ExtArgs["result"]["historial_operaciones"]>
    composites: {}
  }


  type historial_operacionesGetPayload<S extends boolean | null | undefined | historial_operacionesDefaultArgs> = $Result.GetResult<Prisma.$historial_operacionesPayload, S>

  type historial_operacionesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<historial_operacionesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Historial_operacionesCountAggregateInputType | true
    }

  export interface historial_operacionesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['historial_operaciones'], meta: { name: 'historial_operaciones' } }
    /**
     * Find zero or one Historial_operaciones that matches the filter.
     * @param {historial_operacionesFindUniqueArgs} args - Arguments to find a Historial_operaciones
     * @example
     * // Get one Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends historial_operacionesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, historial_operacionesFindUniqueArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Historial_operaciones that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {historial_operacionesFindUniqueOrThrowArgs} args - Arguments to find a Historial_operaciones
     * @example
     * // Get one Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends historial_operacionesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, historial_operacionesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Historial_operaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_operacionesFindFirstArgs} args - Arguments to find a Historial_operaciones
     * @example
     * // Get one Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends historial_operacionesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, historial_operacionesFindFirstArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Historial_operaciones that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_operacionesFindFirstOrThrowArgs} args - Arguments to find a Historial_operaciones
     * @example
     * // Get one Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends historial_operacionesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, historial_operacionesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Historial_operaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_operacionesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.findMany()
     * 
     * // Get first 10 Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historial_operacionesWithIdOnly = await prisma.historial_operaciones.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends historial_operacionesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, historial_operacionesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Historial_operaciones.
     * @param {historial_operacionesCreateArgs} args - Arguments to create a Historial_operaciones.
     * @example
     * // Create one Historial_operaciones
     * const Historial_operaciones = await prisma.historial_operaciones.create({
     *   data: {
     *     // ... data to create a Historial_operaciones
     *   }
     * })
     * 
    **/
    create<T extends historial_operacionesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, historial_operacionesCreateArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Historial_operaciones.
     *     @param {historial_operacionesCreateManyArgs} args - Arguments to create many Historial_operaciones.
     *     @example
     *     // Create many Historial_operaciones
     *     const historial_operaciones = await prisma.historial_operaciones.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends historial_operacionesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, historial_operacionesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Historial_operaciones.
     * @param {historial_operacionesDeleteArgs} args - Arguments to delete one Historial_operaciones.
     * @example
     * // Delete one Historial_operaciones
     * const Historial_operaciones = await prisma.historial_operaciones.delete({
     *   where: {
     *     // ... filter to delete one Historial_operaciones
     *   }
     * })
     * 
    **/
    delete<T extends historial_operacionesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, historial_operacionesDeleteArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Historial_operaciones.
     * @param {historial_operacionesUpdateArgs} args - Arguments to update one Historial_operaciones.
     * @example
     * // Update one Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends historial_operacionesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, historial_operacionesUpdateArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Historial_operaciones.
     * @param {historial_operacionesDeleteManyArgs} args - Arguments to filter Historial_operaciones to delete.
     * @example
     * // Delete a few Historial_operaciones
     * const { count } = await prisma.historial_operaciones.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends historial_operacionesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, historial_operacionesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historial_operaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_operacionesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends historial_operacionesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, historial_operacionesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historial_operaciones.
     * @param {historial_operacionesUpsertArgs} args - Arguments to update or create a Historial_operaciones.
     * @example
     * // Update or create a Historial_operaciones
     * const historial_operaciones = await prisma.historial_operaciones.upsert({
     *   create: {
     *     // ... data to create a Historial_operaciones
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historial_operaciones we want to update
     *   }
     * })
    **/
    upsert<T extends historial_operacionesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, historial_operacionesUpsertArgs<ExtArgs>>
    ): Prisma__historial_operacionesClient<$Result.GetResult<Prisma.$historial_operacionesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Historial_operaciones that matches the filter.
     * @param {historial_operacionesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const historial_operaciones = await prisma.historial_operaciones.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: historial_operacionesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Historial_operaciones.
     * @param {historial_operacionesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const historial_operaciones = await prisma.historial_operaciones.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: historial_operacionesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Historial_operaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_operacionesCountArgs} args - Arguments to filter Historial_operaciones to count.
     * @example
     * // Count the number of Historial_operaciones
     * const count = await prisma.historial_operaciones.count({
     *   where: {
     *     // ... the filter for the Historial_operaciones we want to count
     *   }
     * })
    **/
    count<T extends historial_operacionesCountArgs>(
      args?: Subset<T, historial_operacionesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Historial_operacionesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historial_operaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historial_operacionesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Historial_operacionesAggregateArgs>(args: Subset<T, Historial_operacionesAggregateArgs>): Prisma.PrismaPromise<GetHistorial_operacionesAggregateType<T>>

    /**
     * Group by Historial_operaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_operacionesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends historial_operacionesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: historial_operacionesGroupByArgs['orderBy'] }
        : { orderBy?: historial_operacionesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, historial_operacionesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorial_operacionesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the historial_operaciones model
   */
  readonly fields: historial_operacionesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for historial_operaciones.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__historial_operacionesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the historial_operaciones model
   */ 
  interface historial_operacionesFieldRefs {
    readonly id: FieldRef<"historial_operaciones", 'String'>
    readonly accion: FieldRef<"historial_operaciones", 'String'>
    readonly fecha: FieldRef<"historial_operaciones", 'DateTime'>
    readonly id_usuario: FieldRef<"historial_operaciones", 'String'>
    readonly recurso: FieldRef<"historial_operaciones", 'String'>
    readonly detalle: FieldRef<"historial_operaciones", 'String'>
  }
    

  // Custom InputTypes
  /**
   * historial_operaciones findUnique
   */
  export type historial_operacionesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * Filter, which historial_operaciones to fetch.
     */
    where: historial_operacionesWhereUniqueInput
  }

  /**
   * historial_operaciones findUniqueOrThrow
   */
  export type historial_operacionesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * Filter, which historial_operaciones to fetch.
     */
    where: historial_operacionesWhereUniqueInput
  }

  /**
   * historial_operaciones findFirst
   */
  export type historial_operacionesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * Filter, which historial_operaciones to fetch.
     */
    where?: historial_operacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_operaciones to fetch.
     */
    orderBy?: historial_operacionesOrderByWithRelationInput | historial_operacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historial_operaciones.
     */
    cursor?: historial_operacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_operaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_operaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historial_operaciones.
     */
    distinct?: Historial_operacionesScalarFieldEnum | Historial_operacionesScalarFieldEnum[]
  }

  /**
   * historial_operaciones findFirstOrThrow
   */
  export type historial_operacionesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * Filter, which historial_operaciones to fetch.
     */
    where?: historial_operacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_operaciones to fetch.
     */
    orderBy?: historial_operacionesOrderByWithRelationInput | historial_operacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historial_operaciones.
     */
    cursor?: historial_operacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_operaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_operaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historial_operaciones.
     */
    distinct?: Historial_operacionesScalarFieldEnum | Historial_operacionesScalarFieldEnum[]
  }

  /**
   * historial_operaciones findMany
   */
  export type historial_operacionesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * Filter, which historial_operaciones to fetch.
     */
    where?: historial_operacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_operaciones to fetch.
     */
    orderBy?: historial_operacionesOrderByWithRelationInput | historial_operacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing historial_operaciones.
     */
    cursor?: historial_operacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_operaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_operaciones.
     */
    skip?: number
    distinct?: Historial_operacionesScalarFieldEnum | Historial_operacionesScalarFieldEnum[]
  }

  /**
   * historial_operaciones create
   */
  export type historial_operacionesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * The data needed to create a historial_operaciones.
     */
    data: XOR<historial_operacionesCreateInput, historial_operacionesUncheckedCreateInput>
  }

  /**
   * historial_operaciones createMany
   */
  export type historial_operacionesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many historial_operaciones.
     */
    data: historial_operacionesCreateManyInput | historial_operacionesCreateManyInput[]
  }

  /**
   * historial_operaciones update
   */
  export type historial_operacionesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * The data needed to update a historial_operaciones.
     */
    data: XOR<historial_operacionesUpdateInput, historial_operacionesUncheckedUpdateInput>
    /**
     * Choose, which historial_operaciones to update.
     */
    where: historial_operacionesWhereUniqueInput
  }

  /**
   * historial_operaciones updateMany
   */
  export type historial_operacionesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update historial_operaciones.
     */
    data: XOR<historial_operacionesUpdateManyMutationInput, historial_operacionesUncheckedUpdateManyInput>
    /**
     * Filter which historial_operaciones to update
     */
    where?: historial_operacionesWhereInput
  }

  /**
   * historial_operaciones upsert
   */
  export type historial_operacionesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * The filter to search for the historial_operaciones to update in case it exists.
     */
    where: historial_operacionesWhereUniqueInput
    /**
     * In case the historial_operaciones found by the `where` argument doesn't exist, create a new historial_operaciones with this data.
     */
    create: XOR<historial_operacionesCreateInput, historial_operacionesUncheckedCreateInput>
    /**
     * In case the historial_operaciones was found with the provided `where` argument, update it with this data.
     */
    update: XOR<historial_operacionesUpdateInput, historial_operacionesUncheckedUpdateInput>
  }

  /**
   * historial_operaciones delete
   */
  export type historial_operacionesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
    /**
     * Filter which historial_operaciones to delete.
     */
    where: historial_operacionesWhereUniqueInput
  }

  /**
   * historial_operaciones deleteMany
   */
  export type historial_operacionesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historial_operaciones to delete
     */
    where?: historial_operacionesWhereInput
  }

  /**
   * historial_operaciones findRaw
   */
  export type historial_operacionesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * historial_operaciones aggregateRaw
   */
  export type historial_operacionesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * historial_operaciones without action
   */
  export type historial_operacionesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_operaciones
     */
    select?: historial_operacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historial_operacionesInclude<ExtArgs> | null
  }


  /**
   * Model inventario
   */

  export type AggregateInventario = {
    _count: InventarioCountAggregateOutputType | null
    _avg: InventarioAvgAggregateOutputType | null
    _sum: InventarioSumAggregateOutputType | null
    _min: InventarioMinAggregateOutputType | null
    _max: InventarioMaxAggregateOutputType | null
  }

  export type InventarioAvgAggregateOutputType = {
    isbn: number | null
    cantidad: number | null
    precio_unitario: number | null
  }

  export type InventarioSumAggregateOutputType = {
    isbn: number | null
    cantidad: number | null
    precio_unitario: number | null
  }

  export type InventarioMinAggregateOutputType = {
    id: string | null
    isbn: number | null
    editorial: string | null
    titulo: string | null
    cantidad: number | null
    precio_unitario: number | null
  }

  export type InventarioMaxAggregateOutputType = {
    id: string | null
    isbn: number | null
    editorial: string | null
    titulo: string | null
    cantidad: number | null
    precio_unitario: number | null
  }

  export type InventarioCountAggregateOutputType = {
    id: number
    isbn: number
    editorial: number
    titulo: number
    cantidad: number
    precio_unitario: number
    _all: number
  }


  export type InventarioAvgAggregateInputType = {
    isbn?: true
    cantidad?: true
    precio_unitario?: true
  }

  export type InventarioSumAggregateInputType = {
    isbn?: true
    cantidad?: true
    precio_unitario?: true
  }

  export type InventarioMinAggregateInputType = {
    id?: true
    isbn?: true
    editorial?: true
    titulo?: true
    cantidad?: true
    precio_unitario?: true
  }

  export type InventarioMaxAggregateInputType = {
    id?: true
    isbn?: true
    editorial?: true
    titulo?: true
    cantidad?: true
    precio_unitario?: true
  }

  export type InventarioCountAggregateInputType = {
    id?: true
    isbn?: true
    editorial?: true
    titulo?: true
    cantidad?: true
    precio_unitario?: true
    _all?: true
  }

  export type InventarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inventario to aggregate.
     */
    where?: inventarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventarios to fetch.
     */
    orderBy?: inventarioOrderByWithRelationInput | inventarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: inventarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inventarios
    **/
    _count?: true | InventarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventarioMaxAggregateInputType
  }

  export type GetInventarioAggregateType<T extends InventarioAggregateArgs> = {
        [P in keyof T & keyof AggregateInventario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventario[P]>
      : GetScalarType<T[P], AggregateInventario[P]>
  }




  export type inventarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inventarioWhereInput
    orderBy?: inventarioOrderByWithAggregationInput | inventarioOrderByWithAggregationInput[]
    by: InventarioScalarFieldEnum[] | InventarioScalarFieldEnum
    having?: inventarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventarioCountAggregateInputType | true
    _avg?: InventarioAvgAggregateInputType
    _sum?: InventarioSumAggregateInputType
    _min?: InventarioMinAggregateInputType
    _max?: InventarioMaxAggregateInputType
  }

  export type InventarioGroupByOutputType = {
    id: string
    isbn: number
    editorial: string
    titulo: string
    cantidad: number
    precio_unitario: number
    _count: InventarioCountAggregateOutputType | null
    _avg: InventarioAvgAggregateOutputType | null
    _sum: InventarioSumAggregateOutputType | null
    _min: InventarioMinAggregateOutputType | null
    _max: InventarioMaxAggregateOutputType | null
  }

  type GetInventarioGroupByPayload<T extends inventarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventarioGroupByOutputType[P]>
            : GetScalarType<T[P], InventarioGroupByOutputType[P]>
        }
      >
    >


  export type inventarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isbn?: boolean
    editorial?: boolean
    titulo?: boolean
    cantidad?: boolean
    precio_unitario?: boolean
    consignaciones?: boolean | inventario$consignacionesArgs<ExtArgs>
    _count?: boolean | InventarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventario"]>

  export type inventarioSelectScalar = {
    id?: boolean
    isbn?: boolean
    editorial?: boolean
    titulo?: boolean
    cantidad?: boolean
    precio_unitario?: boolean
  }


  export type inventarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consignaciones?: boolean | inventario$consignacionesArgs<ExtArgs>
    _count?: boolean | InventarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $inventarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "inventario"
    objects: {
      consignaciones: Prisma.$consignacionesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isbn: number
      editorial: string
      titulo: string
      cantidad: number
      precio_unitario: number
    }, ExtArgs["result"]["inventario"]>
    composites: {}
  }


  type inventarioGetPayload<S extends boolean | null | undefined | inventarioDefaultArgs> = $Result.GetResult<Prisma.$inventarioPayload, S>

  type inventarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<inventarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventarioCountAggregateInputType | true
    }

  export interface inventarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['inventario'], meta: { name: 'inventario' } }
    /**
     * Find zero or one Inventario that matches the filter.
     * @param {inventarioFindUniqueArgs} args - Arguments to find a Inventario
     * @example
     * // Get one Inventario
     * const inventario = await prisma.inventario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends inventarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, inventarioFindUniqueArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Inventario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {inventarioFindUniqueOrThrowArgs} args - Arguments to find a Inventario
     * @example
     * // Get one Inventario
     * const inventario = await prisma.inventario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends inventarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, inventarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Inventario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventarioFindFirstArgs} args - Arguments to find a Inventario
     * @example
     * // Get one Inventario
     * const inventario = await prisma.inventario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends inventarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, inventarioFindFirstArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Inventario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventarioFindFirstOrThrowArgs} args - Arguments to find a Inventario
     * @example
     * // Get one Inventario
     * const inventario = await prisma.inventario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends inventarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, inventarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Inventarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventarios
     * const inventarios = await prisma.inventario.findMany()
     * 
     * // Get first 10 Inventarios
     * const inventarios = await prisma.inventario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventarioWithIdOnly = await prisma.inventario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends inventarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, inventarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Inventario.
     * @param {inventarioCreateArgs} args - Arguments to create a Inventario.
     * @example
     * // Create one Inventario
     * const Inventario = await prisma.inventario.create({
     *   data: {
     *     // ... data to create a Inventario
     *   }
     * })
     * 
    **/
    create<T extends inventarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, inventarioCreateArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Inventarios.
     *     @param {inventarioCreateManyArgs} args - Arguments to create many Inventarios.
     *     @example
     *     // Create many Inventarios
     *     const inventario = await prisma.inventario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends inventarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, inventarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Inventario.
     * @param {inventarioDeleteArgs} args - Arguments to delete one Inventario.
     * @example
     * // Delete one Inventario
     * const Inventario = await prisma.inventario.delete({
     *   where: {
     *     // ... filter to delete one Inventario
     *   }
     * })
     * 
    **/
    delete<T extends inventarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, inventarioDeleteArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Inventario.
     * @param {inventarioUpdateArgs} args - Arguments to update one Inventario.
     * @example
     * // Update one Inventario
     * const inventario = await prisma.inventario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends inventarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, inventarioUpdateArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Inventarios.
     * @param {inventarioDeleteManyArgs} args - Arguments to filter Inventarios to delete.
     * @example
     * // Delete a few Inventarios
     * const { count } = await prisma.inventario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends inventarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, inventarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventarios
     * const inventario = await prisma.inventario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends inventarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, inventarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventario.
     * @param {inventarioUpsertArgs} args - Arguments to update or create a Inventario.
     * @example
     * // Update or create a Inventario
     * const inventario = await prisma.inventario.upsert({
     *   create: {
     *     // ... data to create a Inventario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventario we want to update
     *   }
     * })
    **/
    upsert<T extends inventarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, inventarioUpsertArgs<ExtArgs>>
    ): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Inventarios that matches the filter.
     * @param {inventarioFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const inventario = await prisma.inventario.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: inventarioFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Inventario.
     * @param {inventarioAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const inventario = await prisma.inventario.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: inventarioAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Inventarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventarioCountArgs} args - Arguments to filter Inventarios to count.
     * @example
     * // Count the number of Inventarios
     * const count = await prisma.inventario.count({
     *   where: {
     *     // ... the filter for the Inventarios we want to count
     *   }
     * })
    **/
    count<T extends inventarioCountArgs>(
      args?: Subset<T, inventarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventarioAggregateArgs>(args: Subset<T, InventarioAggregateArgs>): Prisma.PrismaPromise<GetInventarioAggregateType<T>>

    /**
     * Group by Inventario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends inventarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: inventarioGroupByArgs['orderBy'] }
        : { orderBy?: inventarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, inventarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the inventario model
   */
  readonly fields: inventarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for inventario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__inventarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    consignaciones<T extends inventario$consignacionesArgs<ExtArgs> = {}>(args?: Subset<T, inventario$consignacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the inventario model
   */ 
  interface inventarioFieldRefs {
    readonly id: FieldRef<"inventario", 'String'>
    readonly isbn: FieldRef<"inventario", 'Int'>
    readonly editorial: FieldRef<"inventario", 'String'>
    readonly titulo: FieldRef<"inventario", 'String'>
    readonly cantidad: FieldRef<"inventario", 'Int'>
    readonly precio_unitario: FieldRef<"inventario", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * inventario findUnique
   */
  export type inventarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * Filter, which inventario to fetch.
     */
    where: inventarioWhereUniqueInput
  }

  /**
   * inventario findUniqueOrThrow
   */
  export type inventarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * Filter, which inventario to fetch.
     */
    where: inventarioWhereUniqueInput
  }

  /**
   * inventario findFirst
   */
  export type inventarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * Filter, which inventario to fetch.
     */
    where?: inventarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventarios to fetch.
     */
    orderBy?: inventarioOrderByWithRelationInput | inventarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inventarios.
     */
    cursor?: inventarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inventarios.
     */
    distinct?: InventarioScalarFieldEnum | InventarioScalarFieldEnum[]
  }

  /**
   * inventario findFirstOrThrow
   */
  export type inventarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * Filter, which inventario to fetch.
     */
    where?: inventarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventarios to fetch.
     */
    orderBy?: inventarioOrderByWithRelationInput | inventarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inventarios.
     */
    cursor?: inventarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inventarios.
     */
    distinct?: InventarioScalarFieldEnum | InventarioScalarFieldEnum[]
  }

  /**
   * inventario findMany
   */
  export type inventarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * Filter, which inventarios to fetch.
     */
    where?: inventarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventarios to fetch.
     */
    orderBy?: inventarioOrderByWithRelationInput | inventarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inventarios.
     */
    cursor?: inventarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventarios.
     */
    skip?: number
    distinct?: InventarioScalarFieldEnum | InventarioScalarFieldEnum[]
  }

  /**
   * inventario create
   */
  export type inventarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * The data needed to create a inventario.
     */
    data: XOR<inventarioCreateInput, inventarioUncheckedCreateInput>
  }

  /**
   * inventario createMany
   */
  export type inventarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many inventarios.
     */
    data: inventarioCreateManyInput | inventarioCreateManyInput[]
  }

  /**
   * inventario update
   */
  export type inventarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * The data needed to update a inventario.
     */
    data: XOR<inventarioUpdateInput, inventarioUncheckedUpdateInput>
    /**
     * Choose, which inventario to update.
     */
    where: inventarioWhereUniqueInput
  }

  /**
   * inventario updateMany
   */
  export type inventarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update inventarios.
     */
    data: XOR<inventarioUpdateManyMutationInput, inventarioUncheckedUpdateManyInput>
    /**
     * Filter which inventarios to update
     */
    where?: inventarioWhereInput
  }

  /**
   * inventario upsert
   */
  export type inventarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * The filter to search for the inventario to update in case it exists.
     */
    where: inventarioWhereUniqueInput
    /**
     * In case the inventario found by the `where` argument doesn't exist, create a new inventario with this data.
     */
    create: XOR<inventarioCreateInput, inventarioUncheckedCreateInput>
    /**
     * In case the inventario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<inventarioUpdateInput, inventarioUncheckedUpdateInput>
  }

  /**
   * inventario delete
   */
  export type inventarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
    /**
     * Filter which inventario to delete.
     */
    where: inventarioWhereUniqueInput
  }

  /**
   * inventario deleteMany
   */
  export type inventarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inventarios to delete
     */
    where?: inventarioWhereInput
  }

  /**
   * inventario findRaw
   */
  export type inventarioFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * inventario aggregateRaw
   */
  export type inventarioAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * inventario.consignaciones
   */
  export type inventario$consignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    where?: consignacionesWhereInput
    orderBy?: consignacionesOrderByWithRelationInput | consignacionesOrderByWithRelationInput[]
    cursor?: consignacionesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsignacionesScalarFieldEnum | ConsignacionesScalarFieldEnum[]
  }

  /**
   * inventario without action
   */
  export type inventarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventario
     */
    select?: inventarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventarioInclude<ExtArgs> | null
  }


  /**
   * Model consignaciones
   */

  export type AggregateConsignaciones = {
    _count: ConsignacionesCountAggregateOutputType | null
    _avg: ConsignacionesAvgAggregateOutputType | null
    _sum: ConsignacionesSumAggregateOutputType | null
    _min: ConsignacionesMinAggregateOutputType | null
    _max: ConsignacionesMaxAggregateOutputType | null
  }

  export type ConsignacionesAvgAggregateOutputType = {
    cantidad: number | null
  }

  export type ConsignacionesSumAggregateOutputType = {
    cantidad: number | null
  }

  export type ConsignacionesMinAggregateOutputType = {
    id: string | null
    fecha: Date | null
    id_libro: string | null
    cantidad: number | null
    estado: string | null
    id_usuario: string | null
    id_institucion: string | null
  }

  export type ConsignacionesMaxAggregateOutputType = {
    id: string | null
    fecha: Date | null
    id_libro: string | null
    cantidad: number | null
    estado: string | null
    id_usuario: string | null
    id_institucion: string | null
  }

  export type ConsignacionesCountAggregateOutputType = {
    id: number
    fecha: number
    id_libro: number
    cantidad: number
    estado: number
    id_usuario: number
    id_institucion: number
    _all: number
  }


  export type ConsignacionesAvgAggregateInputType = {
    cantidad?: true
  }

  export type ConsignacionesSumAggregateInputType = {
    cantidad?: true
  }

  export type ConsignacionesMinAggregateInputType = {
    id?: true
    fecha?: true
    id_libro?: true
    cantidad?: true
    estado?: true
    id_usuario?: true
    id_institucion?: true
  }

  export type ConsignacionesMaxAggregateInputType = {
    id?: true
    fecha?: true
    id_libro?: true
    cantidad?: true
    estado?: true
    id_usuario?: true
    id_institucion?: true
  }

  export type ConsignacionesCountAggregateInputType = {
    id?: true
    fecha?: true
    id_libro?: true
    cantidad?: true
    estado?: true
    id_usuario?: true
    id_institucion?: true
    _all?: true
  }

  export type ConsignacionesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consignaciones to aggregate.
     */
    where?: consignacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consignaciones to fetch.
     */
    orderBy?: consignacionesOrderByWithRelationInput | consignacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: consignacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consignaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consignaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned consignaciones
    **/
    _count?: true | ConsignacionesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsignacionesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsignacionesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsignacionesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsignacionesMaxAggregateInputType
  }

  export type GetConsignacionesAggregateType<T extends ConsignacionesAggregateArgs> = {
        [P in keyof T & keyof AggregateConsignaciones]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsignaciones[P]>
      : GetScalarType<T[P], AggregateConsignaciones[P]>
  }




  export type consignacionesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consignacionesWhereInput
    orderBy?: consignacionesOrderByWithAggregationInput | consignacionesOrderByWithAggregationInput[]
    by: ConsignacionesScalarFieldEnum[] | ConsignacionesScalarFieldEnum
    having?: consignacionesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsignacionesCountAggregateInputType | true
    _avg?: ConsignacionesAvgAggregateInputType
    _sum?: ConsignacionesSumAggregateInputType
    _min?: ConsignacionesMinAggregateInputType
    _max?: ConsignacionesMaxAggregateInputType
  }

  export type ConsignacionesGroupByOutputType = {
    id: string
    fecha: Date
    id_libro: string
    cantidad: number
    estado: string
    id_usuario: string
    id_institucion: string
    _count: ConsignacionesCountAggregateOutputType | null
    _avg: ConsignacionesAvgAggregateOutputType | null
    _sum: ConsignacionesSumAggregateOutputType | null
    _min: ConsignacionesMinAggregateOutputType | null
    _max: ConsignacionesMaxAggregateOutputType | null
  }

  type GetConsignacionesGroupByPayload<T extends consignacionesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsignacionesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsignacionesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsignacionesGroupByOutputType[P]>
            : GetScalarType<T[P], ConsignacionesGroupByOutputType[P]>
        }
      >
    >


  export type consignacionesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    id_libro?: boolean
    cantidad?: boolean
    estado?: boolean
    id_usuario?: boolean
    id_institucion?: boolean
    inventario?: boolean | inventarioDefaultArgs<ExtArgs>
    institucion?: boolean | institucionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consignaciones"]>

  export type consignacionesSelectScalar = {
    id?: boolean
    fecha?: boolean
    id_libro?: boolean
    cantidad?: boolean
    estado?: boolean
    id_usuario?: boolean
    id_institucion?: boolean
  }


  export type consignacionesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventario?: boolean | inventarioDefaultArgs<ExtArgs>
    institucion?: boolean | institucionDefaultArgs<ExtArgs>
  }


  export type $consignacionesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "consignaciones"
    objects: {
      inventario: Prisma.$inventarioPayload<ExtArgs>
      institucion: Prisma.$institucionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fecha: Date
      id_libro: string
      cantidad: number
      estado: string
      id_usuario: string
      id_institucion: string
    }, ExtArgs["result"]["consignaciones"]>
    composites: {}
  }


  type consignacionesGetPayload<S extends boolean | null | undefined | consignacionesDefaultArgs> = $Result.GetResult<Prisma.$consignacionesPayload, S>

  type consignacionesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<consignacionesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsignacionesCountAggregateInputType | true
    }

  export interface consignacionesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['consignaciones'], meta: { name: 'consignaciones' } }
    /**
     * Find zero or one Consignaciones that matches the filter.
     * @param {consignacionesFindUniqueArgs} args - Arguments to find a Consignaciones
     * @example
     * // Get one Consignaciones
     * const consignaciones = await prisma.consignaciones.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends consignacionesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, consignacionesFindUniqueArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Consignaciones that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {consignacionesFindUniqueOrThrowArgs} args - Arguments to find a Consignaciones
     * @example
     * // Get one Consignaciones
     * const consignaciones = await prisma.consignaciones.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends consignacionesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, consignacionesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Consignaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consignacionesFindFirstArgs} args - Arguments to find a Consignaciones
     * @example
     * // Get one Consignaciones
     * const consignaciones = await prisma.consignaciones.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends consignacionesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, consignacionesFindFirstArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Consignaciones that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consignacionesFindFirstOrThrowArgs} args - Arguments to find a Consignaciones
     * @example
     * // Get one Consignaciones
     * const consignaciones = await prisma.consignaciones.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends consignacionesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, consignacionesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Consignaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consignacionesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consignaciones
     * const consignaciones = await prisma.consignaciones.findMany()
     * 
     * // Get first 10 Consignaciones
     * const consignaciones = await prisma.consignaciones.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consignacionesWithIdOnly = await prisma.consignaciones.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends consignacionesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, consignacionesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Consignaciones.
     * @param {consignacionesCreateArgs} args - Arguments to create a Consignaciones.
     * @example
     * // Create one Consignaciones
     * const Consignaciones = await prisma.consignaciones.create({
     *   data: {
     *     // ... data to create a Consignaciones
     *   }
     * })
     * 
    **/
    create<T extends consignacionesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, consignacionesCreateArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Consignaciones.
     *     @param {consignacionesCreateManyArgs} args - Arguments to create many Consignaciones.
     *     @example
     *     // Create many Consignaciones
     *     const consignaciones = await prisma.consignaciones.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends consignacionesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, consignacionesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Consignaciones.
     * @param {consignacionesDeleteArgs} args - Arguments to delete one Consignaciones.
     * @example
     * // Delete one Consignaciones
     * const Consignaciones = await prisma.consignaciones.delete({
     *   where: {
     *     // ... filter to delete one Consignaciones
     *   }
     * })
     * 
    **/
    delete<T extends consignacionesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, consignacionesDeleteArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Consignaciones.
     * @param {consignacionesUpdateArgs} args - Arguments to update one Consignaciones.
     * @example
     * // Update one Consignaciones
     * const consignaciones = await prisma.consignaciones.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends consignacionesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, consignacionesUpdateArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Consignaciones.
     * @param {consignacionesDeleteManyArgs} args - Arguments to filter Consignaciones to delete.
     * @example
     * // Delete a few Consignaciones
     * const { count } = await prisma.consignaciones.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends consignacionesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, consignacionesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consignaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consignacionesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consignaciones
     * const consignaciones = await prisma.consignaciones.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends consignacionesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, consignacionesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consignaciones.
     * @param {consignacionesUpsertArgs} args - Arguments to update or create a Consignaciones.
     * @example
     * // Update or create a Consignaciones
     * const consignaciones = await prisma.consignaciones.upsert({
     *   create: {
     *     // ... data to create a Consignaciones
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consignaciones we want to update
     *   }
     * })
    **/
    upsert<T extends consignacionesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, consignacionesUpsertArgs<ExtArgs>>
    ): Prisma__consignacionesClient<$Result.GetResult<Prisma.$consignacionesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Consignaciones that matches the filter.
     * @param {consignacionesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const consignaciones = await prisma.consignaciones.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: consignacionesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Consignaciones.
     * @param {consignacionesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const consignaciones = await prisma.consignaciones.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: consignacionesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Consignaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consignacionesCountArgs} args - Arguments to filter Consignaciones to count.
     * @example
     * // Count the number of Consignaciones
     * const count = await prisma.consignaciones.count({
     *   where: {
     *     // ... the filter for the Consignaciones we want to count
     *   }
     * })
    **/
    count<T extends consignacionesCountArgs>(
      args?: Subset<T, consignacionesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsignacionesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consignaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsignacionesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsignacionesAggregateArgs>(args: Subset<T, ConsignacionesAggregateArgs>): Prisma.PrismaPromise<GetConsignacionesAggregateType<T>>

    /**
     * Group by Consignaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consignacionesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends consignacionesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: consignacionesGroupByArgs['orderBy'] }
        : { orderBy?: consignacionesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, consignacionesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsignacionesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the consignaciones model
   */
  readonly fields: consignacionesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for consignaciones.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__consignacionesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    inventario<T extends inventarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, inventarioDefaultArgs<ExtArgs>>): Prisma__inventarioClient<$Result.GetResult<Prisma.$inventarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    institucion<T extends institucionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, institucionDefaultArgs<ExtArgs>>): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the consignaciones model
   */ 
  interface consignacionesFieldRefs {
    readonly id: FieldRef<"consignaciones", 'String'>
    readonly fecha: FieldRef<"consignaciones", 'DateTime'>
    readonly id_libro: FieldRef<"consignaciones", 'String'>
    readonly cantidad: FieldRef<"consignaciones", 'Int'>
    readonly estado: FieldRef<"consignaciones", 'String'>
    readonly id_usuario: FieldRef<"consignaciones", 'String'>
    readonly id_institucion: FieldRef<"consignaciones", 'String'>
  }
    

  // Custom InputTypes
  /**
   * consignaciones findUnique
   */
  export type consignacionesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * Filter, which consignaciones to fetch.
     */
    where: consignacionesWhereUniqueInput
  }

  /**
   * consignaciones findUniqueOrThrow
   */
  export type consignacionesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * Filter, which consignaciones to fetch.
     */
    where: consignacionesWhereUniqueInput
  }

  /**
   * consignaciones findFirst
   */
  export type consignacionesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * Filter, which consignaciones to fetch.
     */
    where?: consignacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consignaciones to fetch.
     */
    orderBy?: consignacionesOrderByWithRelationInput | consignacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consignaciones.
     */
    cursor?: consignacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consignaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consignaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consignaciones.
     */
    distinct?: ConsignacionesScalarFieldEnum | ConsignacionesScalarFieldEnum[]
  }

  /**
   * consignaciones findFirstOrThrow
   */
  export type consignacionesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * Filter, which consignaciones to fetch.
     */
    where?: consignacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consignaciones to fetch.
     */
    orderBy?: consignacionesOrderByWithRelationInput | consignacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consignaciones.
     */
    cursor?: consignacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consignaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consignaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consignaciones.
     */
    distinct?: ConsignacionesScalarFieldEnum | ConsignacionesScalarFieldEnum[]
  }

  /**
   * consignaciones findMany
   */
  export type consignacionesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * Filter, which consignaciones to fetch.
     */
    where?: consignacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consignaciones to fetch.
     */
    orderBy?: consignacionesOrderByWithRelationInput | consignacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing consignaciones.
     */
    cursor?: consignacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consignaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consignaciones.
     */
    skip?: number
    distinct?: ConsignacionesScalarFieldEnum | ConsignacionesScalarFieldEnum[]
  }

  /**
   * consignaciones create
   */
  export type consignacionesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * The data needed to create a consignaciones.
     */
    data: XOR<consignacionesCreateInput, consignacionesUncheckedCreateInput>
  }

  /**
   * consignaciones createMany
   */
  export type consignacionesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many consignaciones.
     */
    data: consignacionesCreateManyInput | consignacionesCreateManyInput[]
  }

  /**
   * consignaciones update
   */
  export type consignacionesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * The data needed to update a consignaciones.
     */
    data: XOR<consignacionesUpdateInput, consignacionesUncheckedUpdateInput>
    /**
     * Choose, which consignaciones to update.
     */
    where: consignacionesWhereUniqueInput
  }

  /**
   * consignaciones updateMany
   */
  export type consignacionesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update consignaciones.
     */
    data: XOR<consignacionesUpdateManyMutationInput, consignacionesUncheckedUpdateManyInput>
    /**
     * Filter which consignaciones to update
     */
    where?: consignacionesWhereInput
  }

  /**
   * consignaciones upsert
   */
  export type consignacionesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * The filter to search for the consignaciones to update in case it exists.
     */
    where: consignacionesWhereUniqueInput
    /**
     * In case the consignaciones found by the `where` argument doesn't exist, create a new consignaciones with this data.
     */
    create: XOR<consignacionesCreateInput, consignacionesUncheckedCreateInput>
    /**
     * In case the consignaciones was found with the provided `where` argument, update it with this data.
     */
    update: XOR<consignacionesUpdateInput, consignacionesUncheckedUpdateInput>
  }

  /**
   * consignaciones delete
   */
  export type consignacionesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
    /**
     * Filter which consignaciones to delete.
     */
    where: consignacionesWhereUniqueInput
  }

  /**
   * consignaciones deleteMany
   */
  export type consignacionesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consignaciones to delete
     */
    where?: consignacionesWhereInput
  }

  /**
   * consignaciones findRaw
   */
  export type consignacionesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * consignaciones aggregateRaw
   */
  export type consignacionesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * consignaciones without action
   */
  export type consignacionesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consignaciones
     */
    select?: consignacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consignacionesInclude<ExtArgs> | null
  }


  /**
   * Model factura
   */

  export type AggregateFactura = {
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  export type FacturaAvgAggregateOutputType = {
    num_factura: number | null
    descuento: number | null
  }

  export type FacturaSumAggregateOutputType = {
    num_factura: number | null
    descuento: number | null
  }

  export type FacturaMinAggregateOutputType = {
    id: string | null
    fecha: Date | null
    num_factura: number | null
    tipo_documento: string | null
    id_institucion: string | null
    descuento: number | null
    id_usuario: string | null
    estado: string | null
  }

  export type FacturaMaxAggregateOutputType = {
    id: string | null
    fecha: Date | null
    num_factura: number | null
    tipo_documento: string | null
    id_institucion: string | null
    descuento: number | null
    id_usuario: string | null
    estado: string | null
  }

  export type FacturaCountAggregateOutputType = {
    id: number
    fecha: number
    num_factura: number
    tipo_documento: number
    id_institucion: number
    descuento: number
    id_usuario: number
    estado: number
    _all: number
  }


  export type FacturaAvgAggregateInputType = {
    num_factura?: true
    descuento?: true
  }

  export type FacturaSumAggregateInputType = {
    num_factura?: true
    descuento?: true
  }

  export type FacturaMinAggregateInputType = {
    id?: true
    fecha?: true
    num_factura?: true
    tipo_documento?: true
    id_institucion?: true
    descuento?: true
    id_usuario?: true
    estado?: true
  }

  export type FacturaMaxAggregateInputType = {
    id?: true
    fecha?: true
    num_factura?: true
    tipo_documento?: true
    id_institucion?: true
    descuento?: true
    id_usuario?: true
    estado?: true
  }

  export type FacturaCountAggregateInputType = {
    id?: true
    fecha?: true
    num_factura?: true
    tipo_documento?: true
    id_institucion?: true
    descuento?: true
    id_usuario?: true
    estado?: true
    _all?: true
  }

  export type FacturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which factura to aggregate.
     */
    where?: facturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facturas to fetch.
     */
    orderBy?: facturaOrderByWithRelationInput | facturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: facturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned facturas
    **/
    _count?: true | FacturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacturaMaxAggregateInputType
  }

  export type GetFacturaAggregateType<T extends FacturaAggregateArgs> = {
        [P in keyof T & keyof AggregateFactura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactura[P]>
      : GetScalarType<T[P], AggregateFactura[P]>
  }




  export type facturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: facturaWhereInput
    orderBy?: facturaOrderByWithAggregationInput | facturaOrderByWithAggregationInput[]
    by: FacturaScalarFieldEnum[] | FacturaScalarFieldEnum
    having?: facturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacturaCountAggregateInputType | true
    _avg?: FacturaAvgAggregateInputType
    _sum?: FacturaSumAggregateInputType
    _min?: FacturaMinAggregateInputType
    _max?: FacturaMaxAggregateInputType
  }

  export type FacturaGroupByOutputType = {
    id: string
    fecha: Date
    num_factura: number
    tipo_documento: string
    id_institucion: string
    descuento: number | null
    id_usuario: string
    estado: string
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  type GetFacturaGroupByPayload<T extends facturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacturaGroupByOutputType[P]>
            : GetScalarType<T[P], FacturaGroupByOutputType[P]>
        }
      >
    >


  export type facturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    num_factura?: boolean
    tipo_documento?: boolean
    id_institucion?: boolean
    articulos?: boolean | detalle_articulosDefaultArgs<ExtArgs>
    descuento?: boolean
    id_usuario?: boolean
    estado?: boolean
    institucion?: boolean | institucionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>

  export type facturaSelectScalar = {
    id?: boolean
    fecha?: boolean
    num_factura?: boolean
    tipo_documento?: boolean
    id_institucion?: boolean
    descuento?: boolean
    id_usuario?: boolean
    estado?: boolean
  }


  export type facturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institucion?: boolean | institucionDefaultArgs<ExtArgs>
  }


  export type $facturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "factura"
    objects: {
      institucion: Prisma.$institucionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fecha: Date
      num_factura: number
      tipo_documento: string
      id_institucion: string
      descuento: number | null
      id_usuario: string
      estado: string
    }, ExtArgs["result"]["factura"]>
    composites: {
      articulos: Prisma.$detalle_articulosPayload[]
    }
  }


  type facturaGetPayload<S extends boolean | null | undefined | facturaDefaultArgs> = $Result.GetResult<Prisma.$facturaPayload, S>

  type facturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<facturaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacturaCountAggregateInputType | true
    }

  export interface facturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['factura'], meta: { name: 'factura' } }
    /**
     * Find zero or one Factura that matches the filter.
     * @param {facturaFindUniqueArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends facturaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, facturaFindUniqueArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Factura that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {facturaFindUniqueOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends facturaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, facturaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Factura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facturaFindFirstArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends facturaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, facturaFindFirstArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Factura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facturaFindFirstOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends facturaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, facturaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Facturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facturaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Facturas
     * const facturas = await prisma.factura.findMany()
     * 
     * // Get first 10 Facturas
     * const facturas = await prisma.factura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facturaWithIdOnly = await prisma.factura.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends facturaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, facturaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Factura.
     * @param {facturaCreateArgs} args - Arguments to create a Factura.
     * @example
     * // Create one Factura
     * const Factura = await prisma.factura.create({
     *   data: {
     *     // ... data to create a Factura
     *   }
     * })
     * 
    **/
    create<T extends facturaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, facturaCreateArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Facturas.
     *     @param {facturaCreateManyArgs} args - Arguments to create many Facturas.
     *     @example
     *     // Create many Facturas
     *     const factura = await prisma.factura.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends facturaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, facturaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Factura.
     * @param {facturaDeleteArgs} args - Arguments to delete one Factura.
     * @example
     * // Delete one Factura
     * const Factura = await prisma.factura.delete({
     *   where: {
     *     // ... filter to delete one Factura
     *   }
     * })
     * 
    **/
    delete<T extends facturaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, facturaDeleteArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Factura.
     * @param {facturaUpdateArgs} args - Arguments to update one Factura.
     * @example
     * // Update one Factura
     * const factura = await prisma.factura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends facturaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, facturaUpdateArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Facturas.
     * @param {facturaDeleteManyArgs} args - Arguments to filter Facturas to delete.
     * @example
     * // Delete a few Facturas
     * const { count } = await prisma.factura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends facturaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, facturaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Facturas
     * const factura = await prisma.factura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends facturaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, facturaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Factura.
     * @param {facturaUpsertArgs} args - Arguments to update or create a Factura.
     * @example
     * // Update or create a Factura
     * const factura = await prisma.factura.upsert({
     *   create: {
     *     // ... data to create a Factura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Factura we want to update
     *   }
     * })
    **/
    upsert<T extends facturaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, facturaUpsertArgs<ExtArgs>>
    ): Prisma__facturaClient<$Result.GetResult<Prisma.$facturaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Facturas that matches the filter.
     * @param {facturaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const factura = await prisma.factura.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: facturaFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Factura.
     * @param {facturaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const factura = await prisma.factura.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: facturaAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facturaCountArgs} args - Arguments to filter Facturas to count.
     * @example
     * // Count the number of Facturas
     * const count = await prisma.factura.count({
     *   where: {
     *     // ... the filter for the Facturas we want to count
     *   }
     * })
    **/
    count<T extends facturaCountArgs>(
      args?: Subset<T, facturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacturaAggregateArgs>(args: Subset<T, FacturaAggregateArgs>): Prisma.PrismaPromise<GetFacturaAggregateType<T>>

    /**
     * Group by Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {facturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends facturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: facturaGroupByArgs['orderBy'] }
        : { orderBy?: facturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, facturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the factura model
   */
  readonly fields: facturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for factura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__facturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    institucion<T extends institucionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, institucionDefaultArgs<ExtArgs>>): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the factura model
   */ 
  interface facturaFieldRefs {
    readonly id: FieldRef<"factura", 'String'>
    readonly fecha: FieldRef<"factura", 'DateTime'>
    readonly num_factura: FieldRef<"factura", 'Int'>
    readonly tipo_documento: FieldRef<"factura", 'String'>
    readonly id_institucion: FieldRef<"factura", 'String'>
    readonly descuento: FieldRef<"factura", 'Float'>
    readonly id_usuario: FieldRef<"factura", 'String'>
    readonly estado: FieldRef<"factura", 'String'>
  }
    

  // Custom InputTypes
  /**
   * factura findUnique
   */
  export type facturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * Filter, which factura to fetch.
     */
    where: facturaWhereUniqueInput
  }

  /**
   * factura findUniqueOrThrow
   */
  export type facturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * Filter, which factura to fetch.
     */
    where: facturaWhereUniqueInput
  }

  /**
   * factura findFirst
   */
  export type facturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * Filter, which factura to fetch.
     */
    where?: facturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facturas to fetch.
     */
    orderBy?: facturaOrderByWithRelationInput | facturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for facturas.
     */
    cursor?: facturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * factura findFirstOrThrow
   */
  export type facturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * Filter, which factura to fetch.
     */
    where?: facturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facturas to fetch.
     */
    orderBy?: facturaOrderByWithRelationInput | facturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for facturas.
     */
    cursor?: facturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * factura findMany
   */
  export type facturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * Filter, which facturas to fetch.
     */
    where?: facturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of facturas to fetch.
     */
    orderBy?: facturaOrderByWithRelationInput | facturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing facturas.
     */
    cursor?: facturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` facturas.
     */
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * factura create
   */
  export type facturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * The data needed to create a factura.
     */
    data: XOR<facturaCreateInput, facturaUncheckedCreateInput>
  }

  /**
   * factura createMany
   */
  export type facturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many facturas.
     */
    data: facturaCreateManyInput | facturaCreateManyInput[]
  }

  /**
   * factura update
   */
  export type facturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * The data needed to update a factura.
     */
    data: XOR<facturaUpdateInput, facturaUncheckedUpdateInput>
    /**
     * Choose, which factura to update.
     */
    where: facturaWhereUniqueInput
  }

  /**
   * factura updateMany
   */
  export type facturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update facturas.
     */
    data: XOR<facturaUpdateManyMutationInput, facturaUncheckedUpdateManyInput>
    /**
     * Filter which facturas to update
     */
    where?: facturaWhereInput
  }

  /**
   * factura upsert
   */
  export type facturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * The filter to search for the factura to update in case it exists.
     */
    where: facturaWhereUniqueInput
    /**
     * In case the factura found by the `where` argument doesn't exist, create a new factura with this data.
     */
    create: XOR<facturaCreateInput, facturaUncheckedCreateInput>
    /**
     * In case the factura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<facturaUpdateInput, facturaUncheckedUpdateInput>
  }

  /**
   * factura delete
   */
  export type facturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
    /**
     * Filter which factura to delete.
     */
    where: facturaWhereUniqueInput
  }

  /**
   * factura deleteMany
   */
  export type facturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which facturas to delete
     */
    where?: facturaWhereInput
  }

  /**
   * factura findRaw
   */
  export type facturaFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * factura aggregateRaw
   */
  export type facturaAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * factura without action
   */
  export type facturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the factura
     */
    select?: facturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: facturaInclude<ExtArgs> | null
  }


  /**
   * Model cotizaciones
   */

  export type AggregateCotizaciones = {
    _count: CotizacionesCountAggregateOutputType | null
    _min: CotizacionesMinAggregateOutputType | null
    _max: CotizacionesMaxAggregateOutputType | null
  }

  export type CotizacionesMinAggregateOutputType = {
    id: string | null
    fecha: Date | null
    id_institucion: string | null
    id_usuario_solicita: string | null
    estado: string | null
  }

  export type CotizacionesMaxAggregateOutputType = {
    id: string | null
    fecha: Date | null
    id_institucion: string | null
    id_usuario_solicita: string | null
    estado: string | null
  }

  export type CotizacionesCountAggregateOutputType = {
    id: number
    fecha: number
    id_institucion: number
    id_usuario_solicita: number
    estado: number
    _all: number
  }


  export type CotizacionesMinAggregateInputType = {
    id?: true
    fecha?: true
    id_institucion?: true
    id_usuario_solicita?: true
    estado?: true
  }

  export type CotizacionesMaxAggregateInputType = {
    id?: true
    fecha?: true
    id_institucion?: true
    id_usuario_solicita?: true
    estado?: true
  }

  export type CotizacionesCountAggregateInputType = {
    id?: true
    fecha?: true
    id_institucion?: true
    id_usuario_solicita?: true
    estado?: true
    _all?: true
  }

  export type CotizacionesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cotizaciones to aggregate.
     */
    where?: cotizacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cotizaciones to fetch.
     */
    orderBy?: cotizacionesOrderByWithRelationInput | cotizacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cotizacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cotizaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cotizaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cotizaciones
    **/
    _count?: true | CotizacionesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CotizacionesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CotizacionesMaxAggregateInputType
  }

  export type GetCotizacionesAggregateType<T extends CotizacionesAggregateArgs> = {
        [P in keyof T & keyof AggregateCotizaciones]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCotizaciones[P]>
      : GetScalarType<T[P], AggregateCotizaciones[P]>
  }




  export type cotizacionesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cotizacionesWhereInput
    orderBy?: cotizacionesOrderByWithAggregationInput | cotizacionesOrderByWithAggregationInput[]
    by: CotizacionesScalarFieldEnum[] | CotizacionesScalarFieldEnum
    having?: cotizacionesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CotizacionesCountAggregateInputType | true
    _min?: CotizacionesMinAggregateInputType
    _max?: CotizacionesMaxAggregateInputType
  }

  export type CotizacionesGroupByOutputType = {
    id: string
    fecha: Date
    id_institucion: string
    id_usuario_solicita: string
    estado: string
    _count: CotizacionesCountAggregateOutputType | null
    _min: CotizacionesMinAggregateOutputType | null
    _max: CotizacionesMaxAggregateOutputType | null
  }

  type GetCotizacionesGroupByPayload<T extends cotizacionesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CotizacionesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CotizacionesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CotizacionesGroupByOutputType[P]>
            : GetScalarType<T[P], CotizacionesGroupByOutputType[P]>
        }
      >
    >


  export type cotizacionesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    id_institucion?: boolean
    detalle_articulos?: boolean | detalle_articulosDefaultArgs<ExtArgs>
    id_usuario_solicita?: boolean
    estado?: boolean
    aprobado_por?: boolean | aprobado_porDefaultArgs<ExtArgs>
    institucion?: boolean | institucionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cotizaciones"]>

  export type cotizacionesSelectScalar = {
    id?: boolean
    fecha?: boolean
    id_institucion?: boolean
    id_usuario_solicita?: boolean
    estado?: boolean
  }


  export type cotizacionesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    institucion?: boolean | institucionDefaultArgs<ExtArgs>
  }


  export type $cotizacionesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cotizaciones"
    objects: {
      institucion: Prisma.$institucionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fecha: Date
      id_institucion: string
      id_usuario_solicita: string
      estado: string
    }, ExtArgs["result"]["cotizaciones"]>
    composites: {
      detalle_articulos: Prisma.$detalle_articulosPayload[]
      aprobado_por: Prisma.$aprobado_porPayload | null
    }
  }


  type cotizacionesGetPayload<S extends boolean | null | undefined | cotizacionesDefaultArgs> = $Result.GetResult<Prisma.$cotizacionesPayload, S>

  type cotizacionesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cotizacionesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CotizacionesCountAggregateInputType | true
    }

  export interface cotizacionesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cotizaciones'], meta: { name: 'cotizaciones' } }
    /**
     * Find zero or one Cotizaciones that matches the filter.
     * @param {cotizacionesFindUniqueArgs} args - Arguments to find a Cotizaciones
     * @example
     * // Get one Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cotizacionesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cotizacionesFindUniqueArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cotizaciones that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cotizacionesFindUniqueOrThrowArgs} args - Arguments to find a Cotizaciones
     * @example
     * // Get one Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cotizacionesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cotizacionesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cotizaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cotizacionesFindFirstArgs} args - Arguments to find a Cotizaciones
     * @example
     * // Get one Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cotizacionesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cotizacionesFindFirstArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cotizaciones that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cotizacionesFindFirstOrThrowArgs} args - Arguments to find a Cotizaciones
     * @example
     * // Get one Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cotizacionesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cotizacionesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cotizaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cotizacionesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.findMany()
     * 
     * // Get first 10 Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cotizacionesWithIdOnly = await prisma.cotizaciones.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cotizacionesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cotizacionesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cotizaciones.
     * @param {cotizacionesCreateArgs} args - Arguments to create a Cotizaciones.
     * @example
     * // Create one Cotizaciones
     * const Cotizaciones = await prisma.cotizaciones.create({
     *   data: {
     *     // ... data to create a Cotizaciones
     *   }
     * })
     * 
    **/
    create<T extends cotizacionesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cotizacionesCreateArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cotizaciones.
     *     @param {cotizacionesCreateManyArgs} args - Arguments to create many Cotizaciones.
     *     @example
     *     // Create many Cotizaciones
     *     const cotizaciones = await prisma.cotizaciones.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cotizacionesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cotizacionesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cotizaciones.
     * @param {cotizacionesDeleteArgs} args - Arguments to delete one Cotizaciones.
     * @example
     * // Delete one Cotizaciones
     * const Cotizaciones = await prisma.cotizaciones.delete({
     *   where: {
     *     // ... filter to delete one Cotizaciones
     *   }
     * })
     * 
    **/
    delete<T extends cotizacionesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cotizacionesDeleteArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cotizaciones.
     * @param {cotizacionesUpdateArgs} args - Arguments to update one Cotizaciones.
     * @example
     * // Update one Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cotizacionesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cotizacionesUpdateArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cotizaciones.
     * @param {cotizacionesDeleteManyArgs} args - Arguments to filter Cotizaciones to delete.
     * @example
     * // Delete a few Cotizaciones
     * const { count } = await prisma.cotizaciones.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cotizacionesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cotizacionesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cotizaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cotizacionesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cotizacionesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cotizacionesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cotizaciones.
     * @param {cotizacionesUpsertArgs} args - Arguments to update or create a Cotizaciones.
     * @example
     * // Update or create a Cotizaciones
     * const cotizaciones = await prisma.cotizaciones.upsert({
     *   create: {
     *     // ... data to create a Cotizaciones
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cotizaciones we want to update
     *   }
     * })
    **/
    upsert<T extends cotizacionesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cotizacionesUpsertArgs<ExtArgs>>
    ): Prisma__cotizacionesClient<$Result.GetResult<Prisma.$cotizacionesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Cotizaciones that matches the filter.
     * @param {cotizacionesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const cotizaciones = await prisma.cotizaciones.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: cotizacionesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Cotizaciones.
     * @param {cotizacionesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const cotizaciones = await prisma.cotizaciones.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: cotizacionesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Cotizaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cotizacionesCountArgs} args - Arguments to filter Cotizaciones to count.
     * @example
     * // Count the number of Cotizaciones
     * const count = await prisma.cotizaciones.count({
     *   where: {
     *     // ... the filter for the Cotizaciones we want to count
     *   }
     * })
    **/
    count<T extends cotizacionesCountArgs>(
      args?: Subset<T, cotizacionesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CotizacionesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cotizaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotizacionesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CotizacionesAggregateArgs>(args: Subset<T, CotizacionesAggregateArgs>): Prisma.PrismaPromise<GetCotizacionesAggregateType<T>>

    /**
     * Group by Cotizaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cotizacionesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cotizacionesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cotizacionesGroupByArgs['orderBy'] }
        : { orderBy?: cotizacionesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cotizacionesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCotizacionesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cotizaciones model
   */
  readonly fields: cotizacionesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cotizaciones.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cotizacionesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    institucion<T extends institucionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, institucionDefaultArgs<ExtArgs>>): Prisma__institucionClient<$Result.GetResult<Prisma.$institucionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cotizaciones model
   */ 
  interface cotizacionesFieldRefs {
    readonly id: FieldRef<"cotizaciones", 'String'>
    readonly fecha: FieldRef<"cotizaciones", 'DateTime'>
    readonly id_institucion: FieldRef<"cotizaciones", 'String'>
    readonly id_usuario_solicita: FieldRef<"cotizaciones", 'String'>
    readonly estado: FieldRef<"cotizaciones", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cotizaciones findUnique
   */
  export type cotizacionesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * Filter, which cotizaciones to fetch.
     */
    where: cotizacionesWhereUniqueInput
  }

  /**
   * cotizaciones findUniqueOrThrow
   */
  export type cotizacionesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * Filter, which cotizaciones to fetch.
     */
    where: cotizacionesWhereUniqueInput
  }

  /**
   * cotizaciones findFirst
   */
  export type cotizacionesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * Filter, which cotizaciones to fetch.
     */
    where?: cotizacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cotizaciones to fetch.
     */
    orderBy?: cotizacionesOrderByWithRelationInput | cotizacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cotizaciones.
     */
    cursor?: cotizacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cotizaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cotizaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cotizaciones.
     */
    distinct?: CotizacionesScalarFieldEnum | CotizacionesScalarFieldEnum[]
  }

  /**
   * cotizaciones findFirstOrThrow
   */
  export type cotizacionesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * Filter, which cotizaciones to fetch.
     */
    where?: cotizacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cotizaciones to fetch.
     */
    orderBy?: cotizacionesOrderByWithRelationInput | cotizacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cotizaciones.
     */
    cursor?: cotizacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cotizaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cotizaciones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cotizaciones.
     */
    distinct?: CotizacionesScalarFieldEnum | CotizacionesScalarFieldEnum[]
  }

  /**
   * cotizaciones findMany
   */
  export type cotizacionesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * Filter, which cotizaciones to fetch.
     */
    where?: cotizacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cotizaciones to fetch.
     */
    orderBy?: cotizacionesOrderByWithRelationInput | cotizacionesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cotizaciones.
     */
    cursor?: cotizacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cotizaciones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cotizaciones.
     */
    skip?: number
    distinct?: CotizacionesScalarFieldEnum | CotizacionesScalarFieldEnum[]
  }

  /**
   * cotizaciones create
   */
  export type cotizacionesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * The data needed to create a cotizaciones.
     */
    data: XOR<cotizacionesCreateInput, cotizacionesUncheckedCreateInput>
  }

  /**
   * cotizaciones createMany
   */
  export type cotizacionesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cotizaciones.
     */
    data: cotizacionesCreateManyInput | cotizacionesCreateManyInput[]
  }

  /**
   * cotizaciones update
   */
  export type cotizacionesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * The data needed to update a cotizaciones.
     */
    data: XOR<cotizacionesUpdateInput, cotizacionesUncheckedUpdateInput>
    /**
     * Choose, which cotizaciones to update.
     */
    where: cotizacionesWhereUniqueInput
  }

  /**
   * cotizaciones updateMany
   */
  export type cotizacionesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cotizaciones.
     */
    data: XOR<cotizacionesUpdateManyMutationInput, cotizacionesUncheckedUpdateManyInput>
    /**
     * Filter which cotizaciones to update
     */
    where?: cotizacionesWhereInput
  }

  /**
   * cotizaciones upsert
   */
  export type cotizacionesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * The filter to search for the cotizaciones to update in case it exists.
     */
    where: cotizacionesWhereUniqueInput
    /**
     * In case the cotizaciones found by the `where` argument doesn't exist, create a new cotizaciones with this data.
     */
    create: XOR<cotizacionesCreateInput, cotizacionesUncheckedCreateInput>
    /**
     * In case the cotizaciones was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cotizacionesUpdateInput, cotizacionesUncheckedUpdateInput>
  }

  /**
   * cotizaciones delete
   */
  export type cotizacionesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
    /**
     * Filter which cotizaciones to delete.
     */
    where: cotizacionesWhereUniqueInput
  }

  /**
   * cotizaciones deleteMany
   */
  export type cotizacionesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cotizaciones to delete
     */
    where?: cotizacionesWhereInput
  }

  /**
   * cotizaciones findRaw
   */
  export type cotizacionesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * cotizaciones aggregateRaw
   */
  export type cotizacionesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * cotizaciones without action
   */
  export type cotizacionesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cotizaciones
     */
    select?: cotizacionesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cotizacionesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UsuarioScalarFieldEnum: {
    id: 'id',
    email: 'email',
    rol: 'rol',
    nombre: 'nombre',
    apellido: 'apellido',
    contrasena: 'contrasena'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const InstitucionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    contacto_principal: 'contacto_principal',
    tel_contacto_principal: 'tel_contacto_principal',
    contacto_secundario: 'contacto_secundario',
    tel_contacto_secundario: 'tel_contacto_secundario',
    porcentaje_descuento: 'porcentaje_descuento'
  };

  export type InstitucionScalarFieldEnum = (typeof InstitucionScalarFieldEnum)[keyof typeof InstitucionScalarFieldEnum]


  export const Historial_operacionesScalarFieldEnum: {
    id: 'id',
    accion: 'accion',
    fecha: 'fecha',
    id_usuario: 'id_usuario',
    recurso: 'recurso',
    detalle: 'detalle'
  };

  export type Historial_operacionesScalarFieldEnum = (typeof Historial_operacionesScalarFieldEnum)[keyof typeof Historial_operacionesScalarFieldEnum]


  export const InventarioScalarFieldEnum: {
    id: 'id',
    isbn: 'isbn',
    editorial: 'editorial',
    titulo: 'titulo',
    cantidad: 'cantidad',
    precio_unitario: 'precio_unitario'
  };

  export type InventarioScalarFieldEnum = (typeof InventarioScalarFieldEnum)[keyof typeof InventarioScalarFieldEnum]


  export const ConsignacionesScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    id_libro: 'id_libro',
    cantidad: 'cantidad',
    estado: 'estado',
    id_usuario: 'id_usuario',
    id_institucion: 'id_institucion'
  };

  export type ConsignacionesScalarFieldEnum = (typeof ConsignacionesScalarFieldEnum)[keyof typeof ConsignacionesScalarFieldEnum]


  export const FacturaScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    num_factura: 'num_factura',
    tipo_documento: 'tipo_documento',
    id_institucion: 'id_institucion',
    descuento: 'descuento',
    id_usuario: 'id_usuario',
    estado: 'estado'
  };

  export type FacturaScalarFieldEnum = (typeof FacturaScalarFieldEnum)[keyof typeof FacturaScalarFieldEnum]


  export const CotizacionesScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    id_institucion: 'id_institucion',
    id_usuario_solicita: 'id_usuario_solicita',
    estado: 'estado'
  };

  export type CotizacionesScalarFieldEnum = (typeof CotizacionesScalarFieldEnum)[keyof typeof CotizacionesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id?: StringFilter<"usuario"> | string
    email?: StringFilter<"usuario"> | string
    rol?: StringNullableFilter<"usuario"> | string | null
    nombre?: StringFilter<"usuario"> | string
    apellido?: StringFilter<"usuario"> | string
    contrasena?: StringFilter<"usuario"> | string
    historial_operaciones?: Historial_operacionesListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    contrasena?: SortOrder
    historial_operaciones?: historial_operacionesOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    rol?: StringNullableFilter<"usuario"> | string | null
    nombre?: StringFilter<"usuario"> | string
    apellido?: StringFilter<"usuario"> | string
    contrasena?: StringFilter<"usuario"> | string
    historial_operaciones?: Historial_operacionesListRelationFilter
  }, "id" | "email">

  export type usuarioOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    contrasena?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"usuario"> | string
    email?: StringWithAggregatesFilter<"usuario"> | string
    rol?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    nombre?: StringWithAggregatesFilter<"usuario"> | string
    apellido?: StringWithAggregatesFilter<"usuario"> | string
    contrasena?: StringWithAggregatesFilter<"usuario"> | string
  }

  export type institucionWhereInput = {
    AND?: institucionWhereInput | institucionWhereInput[]
    OR?: institucionWhereInput[]
    NOT?: institucionWhereInput | institucionWhereInput[]
    id?: StringFilter<"institucion"> | string
    nombre?: StringFilter<"institucion"> | string
    direccion?: StringFilter<"institucion"> | string
    contacto_principal?: StringFilter<"institucion"> | string
    tel_contacto_principal?: StringFilter<"institucion"> | string
    contacto_secundario?: StringNullableFilter<"institucion"> | string | null
    tel_contacto_secundario?: StringNullableFilter<"institucion"> | string | null
    porcentaje_descuento?: FloatNullableFilter<"institucion"> | number | null
    consignaciones?: ConsignacionesListRelationFilter
    factura?: FacturaListRelationFilter
    cotizaciones?: CotizacionesListRelationFilter
  }

  export type institucionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    contacto_principal?: SortOrder
    tel_contacto_principal?: SortOrder
    contacto_secundario?: SortOrder
    tel_contacto_secundario?: SortOrder
    porcentaje_descuento?: SortOrder
    consignaciones?: consignacionesOrderByRelationAggregateInput
    factura?: facturaOrderByRelationAggregateInput
    cotizaciones?: cotizacionesOrderByRelationAggregateInput
  }

  export type institucionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: institucionWhereInput | institucionWhereInput[]
    OR?: institucionWhereInput[]
    NOT?: institucionWhereInput | institucionWhereInput[]
    nombre?: StringFilter<"institucion"> | string
    direccion?: StringFilter<"institucion"> | string
    contacto_principal?: StringFilter<"institucion"> | string
    tel_contacto_principal?: StringFilter<"institucion"> | string
    contacto_secundario?: StringNullableFilter<"institucion"> | string | null
    tel_contacto_secundario?: StringNullableFilter<"institucion"> | string | null
    porcentaje_descuento?: FloatNullableFilter<"institucion"> | number | null
    consignaciones?: ConsignacionesListRelationFilter
    factura?: FacturaListRelationFilter
    cotizaciones?: CotizacionesListRelationFilter
  }, "id">

  export type institucionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    contacto_principal?: SortOrder
    tel_contacto_principal?: SortOrder
    contacto_secundario?: SortOrder
    tel_contacto_secundario?: SortOrder
    porcentaje_descuento?: SortOrder
    _count?: institucionCountOrderByAggregateInput
    _avg?: institucionAvgOrderByAggregateInput
    _max?: institucionMaxOrderByAggregateInput
    _min?: institucionMinOrderByAggregateInput
    _sum?: institucionSumOrderByAggregateInput
  }

  export type institucionScalarWhereWithAggregatesInput = {
    AND?: institucionScalarWhereWithAggregatesInput | institucionScalarWhereWithAggregatesInput[]
    OR?: institucionScalarWhereWithAggregatesInput[]
    NOT?: institucionScalarWhereWithAggregatesInput | institucionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"institucion"> | string
    nombre?: StringWithAggregatesFilter<"institucion"> | string
    direccion?: StringWithAggregatesFilter<"institucion"> | string
    contacto_principal?: StringWithAggregatesFilter<"institucion"> | string
    tel_contacto_principal?: StringWithAggregatesFilter<"institucion"> | string
    contacto_secundario?: StringNullableWithAggregatesFilter<"institucion"> | string | null
    tel_contacto_secundario?: StringNullableWithAggregatesFilter<"institucion"> | string | null
    porcentaje_descuento?: FloatNullableWithAggregatesFilter<"institucion"> | number | null
  }

  export type historial_operacionesWhereInput = {
    AND?: historial_operacionesWhereInput | historial_operacionesWhereInput[]
    OR?: historial_operacionesWhereInput[]
    NOT?: historial_operacionesWhereInput | historial_operacionesWhereInput[]
    id?: StringFilter<"historial_operaciones"> | string
    accion?: StringFilter<"historial_operaciones"> | string
    fecha?: DateTimeFilter<"historial_operaciones"> | Date | string
    id_usuario?: StringFilter<"historial_operaciones"> | string
    recurso?: StringFilter<"historial_operaciones"> | string
    detalle?: StringFilter<"historial_operaciones"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type historial_operacionesOrderByWithRelationInput = {
    id?: SortOrder
    accion?: SortOrder
    fecha?: SortOrder
    id_usuario?: SortOrder
    recurso?: SortOrder
    detalle?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type historial_operacionesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: historial_operacionesWhereInput | historial_operacionesWhereInput[]
    OR?: historial_operacionesWhereInput[]
    NOT?: historial_operacionesWhereInput | historial_operacionesWhereInput[]
    accion?: StringFilter<"historial_operaciones"> | string
    fecha?: DateTimeFilter<"historial_operaciones"> | Date | string
    id_usuario?: StringFilter<"historial_operaciones"> | string
    recurso?: StringFilter<"historial_operaciones"> | string
    detalle?: StringFilter<"historial_operaciones"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "id">

  export type historial_operacionesOrderByWithAggregationInput = {
    id?: SortOrder
    accion?: SortOrder
    fecha?: SortOrder
    id_usuario?: SortOrder
    recurso?: SortOrder
    detalle?: SortOrder
    _count?: historial_operacionesCountOrderByAggregateInput
    _max?: historial_operacionesMaxOrderByAggregateInput
    _min?: historial_operacionesMinOrderByAggregateInput
  }

  export type historial_operacionesScalarWhereWithAggregatesInput = {
    AND?: historial_operacionesScalarWhereWithAggregatesInput | historial_operacionesScalarWhereWithAggregatesInput[]
    OR?: historial_operacionesScalarWhereWithAggregatesInput[]
    NOT?: historial_operacionesScalarWhereWithAggregatesInput | historial_operacionesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"historial_operaciones"> | string
    accion?: StringWithAggregatesFilter<"historial_operaciones"> | string
    fecha?: DateTimeWithAggregatesFilter<"historial_operaciones"> | Date | string
    id_usuario?: StringWithAggregatesFilter<"historial_operaciones"> | string
    recurso?: StringWithAggregatesFilter<"historial_operaciones"> | string
    detalle?: StringWithAggregatesFilter<"historial_operaciones"> | string
  }

  export type inventarioWhereInput = {
    AND?: inventarioWhereInput | inventarioWhereInput[]
    OR?: inventarioWhereInput[]
    NOT?: inventarioWhereInput | inventarioWhereInput[]
    id?: StringFilter<"inventario"> | string
    isbn?: IntFilter<"inventario"> | number
    editorial?: StringFilter<"inventario"> | string
    titulo?: StringFilter<"inventario"> | string
    cantidad?: IntFilter<"inventario"> | number
    precio_unitario?: FloatFilter<"inventario"> | number
    consignaciones?: ConsignacionesListRelationFilter
  }

  export type inventarioOrderByWithRelationInput = {
    id?: SortOrder
    isbn?: SortOrder
    editorial?: SortOrder
    titulo?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
    consignaciones?: consignacionesOrderByRelationAggregateInput
  }

  export type inventarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: inventarioWhereInput | inventarioWhereInput[]
    OR?: inventarioWhereInput[]
    NOT?: inventarioWhereInput | inventarioWhereInput[]
    isbn?: IntFilter<"inventario"> | number
    editorial?: StringFilter<"inventario"> | string
    titulo?: StringFilter<"inventario"> | string
    cantidad?: IntFilter<"inventario"> | number
    precio_unitario?: FloatFilter<"inventario"> | number
    consignaciones?: ConsignacionesListRelationFilter
  }, "id">

  export type inventarioOrderByWithAggregationInput = {
    id?: SortOrder
    isbn?: SortOrder
    editorial?: SortOrder
    titulo?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
    _count?: inventarioCountOrderByAggregateInput
    _avg?: inventarioAvgOrderByAggregateInput
    _max?: inventarioMaxOrderByAggregateInput
    _min?: inventarioMinOrderByAggregateInput
    _sum?: inventarioSumOrderByAggregateInput
  }

  export type inventarioScalarWhereWithAggregatesInput = {
    AND?: inventarioScalarWhereWithAggregatesInput | inventarioScalarWhereWithAggregatesInput[]
    OR?: inventarioScalarWhereWithAggregatesInput[]
    NOT?: inventarioScalarWhereWithAggregatesInput | inventarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"inventario"> | string
    isbn?: IntWithAggregatesFilter<"inventario"> | number
    editorial?: StringWithAggregatesFilter<"inventario"> | string
    titulo?: StringWithAggregatesFilter<"inventario"> | string
    cantidad?: IntWithAggregatesFilter<"inventario"> | number
    precio_unitario?: FloatWithAggregatesFilter<"inventario"> | number
  }

  export type consignacionesWhereInput = {
    AND?: consignacionesWhereInput | consignacionesWhereInput[]
    OR?: consignacionesWhereInput[]
    NOT?: consignacionesWhereInput | consignacionesWhereInput[]
    id?: StringFilter<"consignaciones"> | string
    fecha?: DateTimeFilter<"consignaciones"> | Date | string
    id_libro?: StringFilter<"consignaciones"> | string
    cantidad?: IntFilter<"consignaciones"> | number
    estado?: StringFilter<"consignaciones"> | string
    id_usuario?: StringFilter<"consignaciones"> | string
    id_institucion?: StringFilter<"consignaciones"> | string
    inventario?: XOR<InventarioRelationFilter, inventarioWhereInput>
    institucion?: XOR<InstitucionRelationFilter, institucionWhereInput>
  }

  export type consignacionesOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_libro?: SortOrder
    cantidad?: SortOrder
    estado?: SortOrder
    id_usuario?: SortOrder
    id_institucion?: SortOrder
    inventario?: inventarioOrderByWithRelationInput
    institucion?: institucionOrderByWithRelationInput
  }

  export type consignacionesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: consignacionesWhereInput | consignacionesWhereInput[]
    OR?: consignacionesWhereInput[]
    NOT?: consignacionesWhereInput | consignacionesWhereInput[]
    fecha?: DateTimeFilter<"consignaciones"> | Date | string
    id_libro?: StringFilter<"consignaciones"> | string
    cantidad?: IntFilter<"consignaciones"> | number
    estado?: StringFilter<"consignaciones"> | string
    id_usuario?: StringFilter<"consignaciones"> | string
    id_institucion?: StringFilter<"consignaciones"> | string
    inventario?: XOR<InventarioRelationFilter, inventarioWhereInput>
    institucion?: XOR<InstitucionRelationFilter, institucionWhereInput>
  }, "id">

  export type consignacionesOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_libro?: SortOrder
    cantidad?: SortOrder
    estado?: SortOrder
    id_usuario?: SortOrder
    id_institucion?: SortOrder
    _count?: consignacionesCountOrderByAggregateInput
    _avg?: consignacionesAvgOrderByAggregateInput
    _max?: consignacionesMaxOrderByAggregateInput
    _min?: consignacionesMinOrderByAggregateInput
    _sum?: consignacionesSumOrderByAggregateInput
  }

  export type consignacionesScalarWhereWithAggregatesInput = {
    AND?: consignacionesScalarWhereWithAggregatesInput | consignacionesScalarWhereWithAggregatesInput[]
    OR?: consignacionesScalarWhereWithAggregatesInput[]
    NOT?: consignacionesScalarWhereWithAggregatesInput | consignacionesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"consignaciones"> | string
    fecha?: DateTimeWithAggregatesFilter<"consignaciones"> | Date | string
    id_libro?: StringWithAggregatesFilter<"consignaciones"> | string
    cantidad?: IntWithAggregatesFilter<"consignaciones"> | number
    estado?: StringWithAggregatesFilter<"consignaciones"> | string
    id_usuario?: StringWithAggregatesFilter<"consignaciones"> | string
    id_institucion?: StringWithAggregatesFilter<"consignaciones"> | string
  }

  export type facturaWhereInput = {
    AND?: facturaWhereInput | facturaWhereInput[]
    OR?: facturaWhereInput[]
    NOT?: facturaWhereInput | facturaWhereInput[]
    id?: StringFilter<"factura"> | string
    fecha?: DateTimeFilter<"factura"> | Date | string
    num_factura?: IntFilter<"factura"> | number
    tipo_documento?: StringFilter<"factura"> | string
    id_institucion?: StringFilter<"factura"> | string
    articulos?: Detalle_articulosCompositeListFilter | detalle_articulosObjectEqualityInput[]
    descuento?: FloatNullableFilter<"factura"> | number | null
    id_usuario?: StringFilter<"factura"> | string
    estado?: StringFilter<"factura"> | string
    institucion?: XOR<InstitucionRelationFilter, institucionWhereInput>
  }

  export type facturaOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    num_factura?: SortOrder
    tipo_documento?: SortOrder
    id_institucion?: SortOrder
    articulos?: detalle_articulosOrderByCompositeAggregateInput
    descuento?: SortOrder
    id_usuario?: SortOrder
    estado?: SortOrder
    institucion?: institucionOrderByWithRelationInput
  }

  export type facturaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: facturaWhereInput | facturaWhereInput[]
    OR?: facturaWhereInput[]
    NOT?: facturaWhereInput | facturaWhereInput[]
    fecha?: DateTimeFilter<"factura"> | Date | string
    num_factura?: IntFilter<"factura"> | number
    tipo_documento?: StringFilter<"factura"> | string
    id_institucion?: StringFilter<"factura"> | string
    articulos?: Detalle_articulosCompositeListFilter | detalle_articulosObjectEqualityInput[]
    descuento?: FloatNullableFilter<"factura"> | number | null
    id_usuario?: StringFilter<"factura"> | string
    estado?: StringFilter<"factura"> | string
    institucion?: XOR<InstitucionRelationFilter, institucionWhereInput>
  }, "id">

  export type facturaOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    num_factura?: SortOrder
    tipo_documento?: SortOrder
    id_institucion?: SortOrder
    descuento?: SortOrder
    id_usuario?: SortOrder
    estado?: SortOrder
    _count?: facturaCountOrderByAggregateInput
    _avg?: facturaAvgOrderByAggregateInput
    _max?: facturaMaxOrderByAggregateInput
    _min?: facturaMinOrderByAggregateInput
    _sum?: facturaSumOrderByAggregateInput
  }

  export type facturaScalarWhereWithAggregatesInput = {
    AND?: facturaScalarWhereWithAggregatesInput | facturaScalarWhereWithAggregatesInput[]
    OR?: facturaScalarWhereWithAggregatesInput[]
    NOT?: facturaScalarWhereWithAggregatesInput | facturaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"factura"> | string
    fecha?: DateTimeWithAggregatesFilter<"factura"> | Date | string
    num_factura?: IntWithAggregatesFilter<"factura"> | number
    tipo_documento?: StringWithAggregatesFilter<"factura"> | string
    id_institucion?: StringWithAggregatesFilter<"factura"> | string
    descuento?: FloatNullableWithAggregatesFilter<"factura"> | number | null
    id_usuario?: StringWithAggregatesFilter<"factura"> | string
    estado?: StringWithAggregatesFilter<"factura"> | string
  }

  export type cotizacionesWhereInput = {
    AND?: cotizacionesWhereInput | cotizacionesWhereInput[]
    OR?: cotizacionesWhereInput[]
    NOT?: cotizacionesWhereInput | cotizacionesWhereInput[]
    id?: StringFilter<"cotizaciones"> | string
    fecha?: DateTimeFilter<"cotizaciones"> | Date | string
    id_institucion?: StringFilter<"cotizaciones"> | string
    detalle_articulos?: Detalle_articulosCompositeListFilter | detalle_articulosObjectEqualityInput[]
    id_usuario_solicita?: StringFilter<"cotizaciones"> | string
    estado?: StringFilter<"cotizaciones"> | string
    aprobado_por?: XOR<Aprobado_porNullableCompositeFilter, aprobado_porObjectEqualityInput> | null
    institucion?: XOR<InstitucionRelationFilter, institucionWhereInput>
  }

  export type cotizacionesOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_institucion?: SortOrder
    detalle_articulos?: detalle_articulosOrderByCompositeAggregateInput
    id_usuario_solicita?: SortOrder
    estado?: SortOrder
    aprobado_por?: aprobado_porOrderByInput
    institucion?: institucionOrderByWithRelationInput
  }

  export type cotizacionesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: cotizacionesWhereInput | cotizacionesWhereInput[]
    OR?: cotizacionesWhereInput[]
    NOT?: cotizacionesWhereInput | cotizacionesWhereInput[]
    fecha?: DateTimeFilter<"cotizaciones"> | Date | string
    id_institucion?: StringFilter<"cotizaciones"> | string
    detalle_articulos?: Detalle_articulosCompositeListFilter | detalle_articulosObjectEqualityInput[]
    id_usuario_solicita?: StringFilter<"cotizaciones"> | string
    estado?: StringFilter<"cotizaciones"> | string
    aprobado_por?: XOR<Aprobado_porNullableCompositeFilter, aprobado_porObjectEqualityInput> | null
    institucion?: XOR<InstitucionRelationFilter, institucionWhereInput>
  }, "id">

  export type cotizacionesOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_institucion?: SortOrder
    id_usuario_solicita?: SortOrder
    estado?: SortOrder
    _count?: cotizacionesCountOrderByAggregateInput
    _max?: cotizacionesMaxOrderByAggregateInput
    _min?: cotizacionesMinOrderByAggregateInput
  }

  export type cotizacionesScalarWhereWithAggregatesInput = {
    AND?: cotizacionesScalarWhereWithAggregatesInput | cotizacionesScalarWhereWithAggregatesInput[]
    OR?: cotizacionesScalarWhereWithAggregatesInput[]
    NOT?: cotizacionesScalarWhereWithAggregatesInput | cotizacionesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cotizaciones"> | string
    fecha?: DateTimeWithAggregatesFilter<"cotizaciones"> | Date | string
    id_institucion?: StringWithAggregatesFilter<"cotizaciones"> | string
    id_usuario_solicita?: StringWithAggregatesFilter<"cotizaciones"> | string
    estado?: StringWithAggregatesFilter<"cotizaciones"> | string
  }

  export type usuarioCreateInput = {
    id?: string
    email: string
    rol?: string | null
    nombre: string
    apellido: string
    contrasena: string
    historial_operaciones?: historial_operacionesCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    id?: string
    email: string
    rol?: string | null
    nombre: string
    apellido: string
    contrasena: string
    historial_operaciones?: historial_operacionesUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    rol?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    historial_operaciones?: historial_operacionesUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    rol?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    historial_operaciones?: historial_operacionesUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    id?: string
    email: string
    rol?: string | null
    nombre: string
    apellido: string
    contrasena: string
  }

  export type usuarioUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    rol?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    rol?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
  }

  export type institucionCreateInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    consignaciones?: consignacionesCreateNestedManyWithoutInstitucionInput
    factura?: facturaCreateNestedManyWithoutInstitucionInput
    cotizaciones?: cotizacionesCreateNestedManyWithoutInstitucionInput
  }

  export type institucionUncheckedCreateInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    consignaciones?: consignacionesUncheckedCreateNestedManyWithoutInstitucionInput
    factura?: facturaUncheckedCreateNestedManyWithoutInstitucionInput
    cotizaciones?: cotizacionesUncheckedCreateNestedManyWithoutInstitucionInput
  }

  export type institucionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    consignaciones?: consignacionesUpdateManyWithoutInstitucionNestedInput
    factura?: facturaUpdateManyWithoutInstitucionNestedInput
    cotizaciones?: cotizacionesUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    consignaciones?: consignacionesUncheckedUpdateManyWithoutInstitucionNestedInput
    factura?: facturaUncheckedUpdateManyWithoutInstitucionNestedInput
    cotizaciones?: cotizacionesUncheckedUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionCreateManyInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
  }

  export type institucionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type institucionUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type historial_operacionesCreateInput = {
    id?: string
    accion: string
    fecha?: Date | string
    recurso: string
    detalle: string
    usuario: usuarioCreateNestedOneWithoutHistorial_operacionesInput
  }

  export type historial_operacionesUncheckedCreateInput = {
    id?: string
    accion: string
    fecha?: Date | string
    id_usuario: string
    recurso: string
    detalle: string
  }

  export type historial_operacionesUpdateInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutHistorial_operacionesNestedInput
  }

  export type historial_operacionesUncheckedUpdateInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
  }

  export type historial_operacionesCreateManyInput = {
    id?: string
    accion: string
    fecha?: Date | string
    id_usuario: string
    recurso: string
    detalle: string
  }

  export type historial_operacionesUpdateManyMutationInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
  }

  export type historial_operacionesUncheckedUpdateManyInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
  }

  export type inventarioCreateInput = {
    id?: string
    isbn: number
    editorial: string
    titulo: string
    cantidad: number
    precio_unitario: number
    consignaciones?: consignacionesCreateNestedManyWithoutInventarioInput
  }

  export type inventarioUncheckedCreateInput = {
    id?: string
    isbn: number
    editorial: string
    titulo: string
    cantidad: number
    precio_unitario: number
    consignaciones?: consignacionesUncheckedCreateNestedManyWithoutInventarioInput
  }

  export type inventarioUpdateInput = {
    isbn?: IntFieldUpdateOperationsInput | number
    editorial?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    consignaciones?: consignacionesUpdateManyWithoutInventarioNestedInput
  }

  export type inventarioUncheckedUpdateInput = {
    isbn?: IntFieldUpdateOperationsInput | number
    editorial?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_unitario?: FloatFieldUpdateOperationsInput | number
    consignaciones?: consignacionesUncheckedUpdateManyWithoutInventarioNestedInput
  }

  export type inventarioCreateManyInput = {
    id?: string
    isbn: number
    editorial: string
    titulo: string
    cantidad: number
    precio_unitario: number
  }

  export type inventarioUpdateManyMutationInput = {
    isbn?: IntFieldUpdateOperationsInput | number
    editorial?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type inventarioUncheckedUpdateManyInput = {
    isbn?: IntFieldUpdateOperationsInput | number
    editorial?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type consignacionesCreateInput = {
    id?: string
    fecha?: Date | string
    cantidad: number
    estado: string
    id_usuario: string
    inventario: inventarioCreateNestedOneWithoutConsignacionesInput
    institucion: institucionCreateNestedOneWithoutConsignacionesInput
  }

  export type consignacionesUncheckedCreateInput = {
    id?: string
    fecha?: Date | string
    id_libro: string
    cantidad: number
    estado: string
    id_usuario: string
    id_institucion: string
  }

  export type consignacionesUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    inventario?: inventarioUpdateOneRequiredWithoutConsignacionesNestedInput
    institucion?: institucionUpdateOneRequiredWithoutConsignacionesNestedInput
  }

  export type consignacionesUncheckedUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_libro?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    id_institucion?: StringFieldUpdateOperationsInput | string
  }

  export type consignacionesCreateManyInput = {
    id?: string
    fecha?: Date | string
    id_libro: string
    cantidad: number
    estado: string
    id_usuario: string
    id_institucion: string
  }

  export type consignacionesUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
  }

  export type consignacionesUncheckedUpdateManyInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_libro?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    id_institucion?: StringFieldUpdateOperationsInput | string
  }

  export type facturaCreateInput = {
    id?: string
    fecha?: Date | string
    num_factura: number
    tipo_documento: string
    articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: number | null
    id_usuario: string
    estado: string
    institucion: institucionCreateNestedOneWithoutFacturaInput
  }

  export type facturaUncheckedCreateInput = {
    id?: string
    fecha?: Date | string
    num_factura: number
    tipo_documento: string
    id_institucion: string
    articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: number | null
    id_usuario: string
    estado: string
  }

  export type facturaUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    institucion?: institucionUpdateOneRequiredWithoutFacturaNestedInput
  }

  export type facturaUncheckedUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    id_institucion?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type facturaCreateManyInput = {
    id?: string
    fecha?: Date | string
    num_factura: number
    tipo_documento: string
    id_institucion: string
    articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: number | null
    id_usuario: string
    estado: string
  }

  export type facturaUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type facturaUncheckedUpdateManyInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    id_institucion?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type cotizacionesCreateInput = {
    id?: string
    fecha?: Date | string
    detalle_articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita: string
    estado: string
    aprobado_por?: XOR<aprobado_porNullableCreateEnvelopeInput, aprobado_porCreateInput> | null
    institucion: institucionCreateNestedOneWithoutCotizacionesInput
  }

  export type cotizacionesUncheckedCreateInput = {
    id?: string
    fecha?: Date | string
    id_institucion: string
    detalle_articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita: string
    estado: string
    aprobado_por?: XOR<aprobado_porNullableCreateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
    institucion?: institucionUpdateOneRequiredWithoutCotizacionesNestedInput
  }

  export type cotizacionesUncheckedUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_institucion?: StringFieldUpdateOperationsInput | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesCreateManyInput = {
    id?: string
    fecha?: Date | string
    id_institucion: string
    detalle_articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita: string
    estado: string
    aprobado_por?: XOR<aprobado_porNullableCreateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesUncheckedUpdateManyInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_institucion?: StringFieldUpdateOperationsInput | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type Historial_operacionesListRelationFilter = {
    every?: historial_operacionesWhereInput
    some?: historial_operacionesWhereInput
    none?: historial_operacionesWhereInput
  }

  export type historial_operacionesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    contrasena?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    contrasena?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    contrasena?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type ConsignacionesListRelationFilter = {
    every?: consignacionesWhereInput
    some?: consignacionesWhereInput
    none?: consignacionesWhereInput
  }

  export type FacturaListRelationFilter = {
    every?: facturaWhereInput
    some?: facturaWhereInput
    none?: facturaWhereInput
  }

  export type CotizacionesListRelationFilter = {
    every?: cotizacionesWhereInput
    some?: cotizacionesWhereInput
    none?: cotizacionesWhereInput
  }

  export type consignacionesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type facturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type cotizacionesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type institucionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    contacto_principal?: SortOrder
    tel_contacto_principal?: SortOrder
    contacto_secundario?: SortOrder
    tel_contacto_secundario?: SortOrder
    porcentaje_descuento?: SortOrder
  }

  export type institucionAvgOrderByAggregateInput = {
    porcentaje_descuento?: SortOrder
  }

  export type institucionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    contacto_principal?: SortOrder
    tel_contacto_principal?: SortOrder
    contacto_secundario?: SortOrder
    tel_contacto_secundario?: SortOrder
    porcentaje_descuento?: SortOrder
  }

  export type institucionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    contacto_principal?: SortOrder
    tel_contacto_principal?: SortOrder
    contacto_secundario?: SortOrder
    tel_contacto_secundario?: SortOrder
    porcentaje_descuento?: SortOrder
  }

  export type institucionSumOrderByAggregateInput = {
    porcentaje_descuento?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type historial_operacionesCountOrderByAggregateInput = {
    id?: SortOrder
    accion?: SortOrder
    fecha?: SortOrder
    id_usuario?: SortOrder
    recurso?: SortOrder
    detalle?: SortOrder
  }

  export type historial_operacionesMaxOrderByAggregateInput = {
    id?: SortOrder
    accion?: SortOrder
    fecha?: SortOrder
    id_usuario?: SortOrder
    recurso?: SortOrder
    detalle?: SortOrder
  }

  export type historial_operacionesMinOrderByAggregateInput = {
    id?: SortOrder
    accion?: SortOrder
    fecha?: SortOrder
    id_usuario?: SortOrder
    recurso?: SortOrder
    detalle?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type inventarioCountOrderByAggregateInput = {
    id?: SortOrder
    isbn?: SortOrder
    editorial?: SortOrder
    titulo?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
  }

  export type inventarioAvgOrderByAggregateInput = {
    isbn?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
  }

  export type inventarioMaxOrderByAggregateInput = {
    id?: SortOrder
    isbn?: SortOrder
    editorial?: SortOrder
    titulo?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
  }

  export type inventarioMinOrderByAggregateInput = {
    id?: SortOrder
    isbn?: SortOrder
    editorial?: SortOrder
    titulo?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
  }

  export type inventarioSumOrderByAggregateInput = {
    isbn?: SortOrder
    cantidad?: SortOrder
    precio_unitario?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InventarioRelationFilter = {
    is?: inventarioWhereInput
    isNot?: inventarioWhereInput
  }

  export type InstitucionRelationFilter = {
    is?: institucionWhereInput
    isNot?: institucionWhereInput
  }

  export type consignacionesCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_libro?: SortOrder
    cantidad?: SortOrder
    estado?: SortOrder
    id_usuario?: SortOrder
    id_institucion?: SortOrder
  }

  export type consignacionesAvgOrderByAggregateInput = {
    cantidad?: SortOrder
  }

  export type consignacionesMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_libro?: SortOrder
    cantidad?: SortOrder
    estado?: SortOrder
    id_usuario?: SortOrder
    id_institucion?: SortOrder
  }

  export type consignacionesMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_libro?: SortOrder
    cantidad?: SortOrder
    estado?: SortOrder
    id_usuario?: SortOrder
    id_institucion?: SortOrder
  }

  export type consignacionesSumOrderByAggregateInput = {
    cantidad?: SortOrder
  }

  export type Detalle_articulosCompositeListFilter = {
    equals?: detalle_articulosObjectEqualityInput[]
    every?: detalle_articulosWhereInput
    some?: detalle_articulosWhereInput
    none?: detalle_articulosWhereInput
    isEmpty?: boolean
    isSet?: boolean
  }

  export type detalle_articulosObjectEqualityInput = {
    id_inventario: string
    cantidad: string
    precio_unitario: string
    precio_total: string
  }

  export type detalle_articulosOrderByCompositeAggregateInput = {
    _count?: SortOrder
  }

  export type facturaCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    num_factura?: SortOrder
    tipo_documento?: SortOrder
    id_institucion?: SortOrder
    descuento?: SortOrder
    id_usuario?: SortOrder
    estado?: SortOrder
  }

  export type facturaAvgOrderByAggregateInput = {
    num_factura?: SortOrder
    descuento?: SortOrder
  }

  export type facturaMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    num_factura?: SortOrder
    tipo_documento?: SortOrder
    id_institucion?: SortOrder
    descuento?: SortOrder
    id_usuario?: SortOrder
    estado?: SortOrder
  }

  export type facturaMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    num_factura?: SortOrder
    tipo_documento?: SortOrder
    id_institucion?: SortOrder
    descuento?: SortOrder
    id_usuario?: SortOrder
    estado?: SortOrder
  }

  export type facturaSumOrderByAggregateInput = {
    num_factura?: SortOrder
    descuento?: SortOrder
  }

  export type Aprobado_porNullableCompositeFilter = {
    equals?: aprobado_porObjectEqualityInput | null
    is?: aprobado_porWhereInput | null
    isNot?: aprobado_porWhereInput | null
    isSet?: boolean
  }

  export type aprobado_porObjectEqualityInput = {
    id_usuario: string
    nombre: string
    fecha_aprobacion: Date | string
  }

  export type aprobado_porOrderByInput = {
    id_usuario?: SortOrder
    nombre?: SortOrder
    fecha_aprobacion?: SortOrder
  }

  export type cotizacionesCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_institucion?: SortOrder
    id_usuario_solicita?: SortOrder
    estado?: SortOrder
  }

  export type cotizacionesMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_institucion?: SortOrder
    id_usuario_solicita?: SortOrder
    estado?: SortOrder
  }

  export type cotizacionesMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    id_institucion?: SortOrder
    id_usuario_solicita?: SortOrder
    estado?: SortOrder
  }

  export type historial_operacionesCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<historial_operacionesCreateWithoutUsuarioInput, historial_operacionesUncheckedCreateWithoutUsuarioInput> | historial_operacionesCreateWithoutUsuarioInput[] | historial_operacionesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: historial_operacionesCreateOrConnectWithoutUsuarioInput | historial_operacionesCreateOrConnectWithoutUsuarioInput[]
    createMany?: historial_operacionesCreateManyUsuarioInputEnvelope
    connect?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
  }

  export type historial_operacionesUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<historial_operacionesCreateWithoutUsuarioInput, historial_operacionesUncheckedCreateWithoutUsuarioInput> | historial_operacionesCreateWithoutUsuarioInput[] | historial_operacionesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: historial_operacionesCreateOrConnectWithoutUsuarioInput | historial_operacionesCreateOrConnectWithoutUsuarioInput[]
    createMany?: historial_operacionesCreateManyUsuarioInputEnvelope
    connect?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type historial_operacionesUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<historial_operacionesCreateWithoutUsuarioInput, historial_operacionesUncheckedCreateWithoutUsuarioInput> | historial_operacionesCreateWithoutUsuarioInput[] | historial_operacionesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: historial_operacionesCreateOrConnectWithoutUsuarioInput | historial_operacionesCreateOrConnectWithoutUsuarioInput[]
    upsert?: historial_operacionesUpsertWithWhereUniqueWithoutUsuarioInput | historial_operacionesUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: historial_operacionesCreateManyUsuarioInputEnvelope
    set?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    disconnect?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    delete?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    connect?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    update?: historial_operacionesUpdateWithWhereUniqueWithoutUsuarioInput | historial_operacionesUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: historial_operacionesUpdateManyWithWhereWithoutUsuarioInput | historial_operacionesUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: historial_operacionesScalarWhereInput | historial_operacionesScalarWhereInput[]
  }

  export type historial_operacionesUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<historial_operacionesCreateWithoutUsuarioInput, historial_operacionesUncheckedCreateWithoutUsuarioInput> | historial_operacionesCreateWithoutUsuarioInput[] | historial_operacionesUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: historial_operacionesCreateOrConnectWithoutUsuarioInput | historial_operacionesCreateOrConnectWithoutUsuarioInput[]
    upsert?: historial_operacionesUpsertWithWhereUniqueWithoutUsuarioInput | historial_operacionesUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: historial_operacionesCreateManyUsuarioInputEnvelope
    set?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    disconnect?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    delete?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    connect?: historial_operacionesWhereUniqueInput | historial_operacionesWhereUniqueInput[]
    update?: historial_operacionesUpdateWithWhereUniqueWithoutUsuarioInput | historial_operacionesUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: historial_operacionesUpdateManyWithWhereWithoutUsuarioInput | historial_operacionesUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: historial_operacionesScalarWhereInput | historial_operacionesScalarWhereInput[]
  }

  export type consignacionesCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<consignacionesCreateWithoutInstitucionInput, consignacionesUncheckedCreateWithoutInstitucionInput> | consignacionesCreateWithoutInstitucionInput[] | consignacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInstitucionInput | consignacionesCreateOrConnectWithoutInstitucionInput[]
    createMany?: consignacionesCreateManyInstitucionInputEnvelope
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
  }

  export type facturaCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<facturaCreateWithoutInstitucionInput, facturaUncheckedCreateWithoutInstitucionInput> | facturaCreateWithoutInstitucionInput[] | facturaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: facturaCreateOrConnectWithoutInstitucionInput | facturaCreateOrConnectWithoutInstitucionInput[]
    createMany?: facturaCreateManyInstitucionInputEnvelope
    connect?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
  }

  export type cotizacionesCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<cotizacionesCreateWithoutInstitucionInput, cotizacionesUncheckedCreateWithoutInstitucionInput> | cotizacionesCreateWithoutInstitucionInput[] | cotizacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: cotizacionesCreateOrConnectWithoutInstitucionInput | cotizacionesCreateOrConnectWithoutInstitucionInput[]
    createMany?: cotizacionesCreateManyInstitucionInputEnvelope
    connect?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
  }

  export type consignacionesUncheckedCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<consignacionesCreateWithoutInstitucionInput, consignacionesUncheckedCreateWithoutInstitucionInput> | consignacionesCreateWithoutInstitucionInput[] | consignacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInstitucionInput | consignacionesCreateOrConnectWithoutInstitucionInput[]
    createMany?: consignacionesCreateManyInstitucionInputEnvelope
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
  }

  export type facturaUncheckedCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<facturaCreateWithoutInstitucionInput, facturaUncheckedCreateWithoutInstitucionInput> | facturaCreateWithoutInstitucionInput[] | facturaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: facturaCreateOrConnectWithoutInstitucionInput | facturaCreateOrConnectWithoutInstitucionInput[]
    createMany?: facturaCreateManyInstitucionInputEnvelope
    connect?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
  }

  export type cotizacionesUncheckedCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<cotizacionesCreateWithoutInstitucionInput, cotizacionesUncheckedCreateWithoutInstitucionInput> | cotizacionesCreateWithoutInstitucionInput[] | cotizacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: cotizacionesCreateOrConnectWithoutInstitucionInput | cotizacionesCreateOrConnectWithoutInstitucionInput[]
    createMany?: cotizacionesCreateManyInstitucionInputEnvelope
    connect?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type consignacionesUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<consignacionesCreateWithoutInstitucionInput, consignacionesUncheckedCreateWithoutInstitucionInput> | consignacionesCreateWithoutInstitucionInput[] | consignacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInstitucionInput | consignacionesCreateOrConnectWithoutInstitucionInput[]
    upsert?: consignacionesUpsertWithWhereUniqueWithoutInstitucionInput | consignacionesUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: consignacionesCreateManyInstitucionInputEnvelope
    set?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    disconnect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    delete?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    update?: consignacionesUpdateWithWhereUniqueWithoutInstitucionInput | consignacionesUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: consignacionesUpdateManyWithWhereWithoutInstitucionInput | consignacionesUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: consignacionesScalarWhereInput | consignacionesScalarWhereInput[]
  }

  export type facturaUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<facturaCreateWithoutInstitucionInput, facturaUncheckedCreateWithoutInstitucionInput> | facturaCreateWithoutInstitucionInput[] | facturaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: facturaCreateOrConnectWithoutInstitucionInput | facturaCreateOrConnectWithoutInstitucionInput[]
    upsert?: facturaUpsertWithWhereUniqueWithoutInstitucionInput | facturaUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: facturaCreateManyInstitucionInputEnvelope
    set?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    disconnect?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    delete?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    connect?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    update?: facturaUpdateWithWhereUniqueWithoutInstitucionInput | facturaUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: facturaUpdateManyWithWhereWithoutInstitucionInput | facturaUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: facturaScalarWhereInput | facturaScalarWhereInput[]
  }

  export type cotizacionesUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<cotizacionesCreateWithoutInstitucionInput, cotizacionesUncheckedCreateWithoutInstitucionInput> | cotizacionesCreateWithoutInstitucionInput[] | cotizacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: cotizacionesCreateOrConnectWithoutInstitucionInput | cotizacionesCreateOrConnectWithoutInstitucionInput[]
    upsert?: cotizacionesUpsertWithWhereUniqueWithoutInstitucionInput | cotizacionesUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: cotizacionesCreateManyInstitucionInputEnvelope
    set?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    disconnect?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    delete?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    connect?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    update?: cotizacionesUpdateWithWhereUniqueWithoutInstitucionInput | cotizacionesUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: cotizacionesUpdateManyWithWhereWithoutInstitucionInput | cotizacionesUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: cotizacionesScalarWhereInput | cotizacionesScalarWhereInput[]
  }

  export type consignacionesUncheckedUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<consignacionesCreateWithoutInstitucionInput, consignacionesUncheckedCreateWithoutInstitucionInput> | consignacionesCreateWithoutInstitucionInput[] | consignacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInstitucionInput | consignacionesCreateOrConnectWithoutInstitucionInput[]
    upsert?: consignacionesUpsertWithWhereUniqueWithoutInstitucionInput | consignacionesUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: consignacionesCreateManyInstitucionInputEnvelope
    set?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    disconnect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    delete?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    update?: consignacionesUpdateWithWhereUniqueWithoutInstitucionInput | consignacionesUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: consignacionesUpdateManyWithWhereWithoutInstitucionInput | consignacionesUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: consignacionesScalarWhereInput | consignacionesScalarWhereInput[]
  }

  export type facturaUncheckedUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<facturaCreateWithoutInstitucionInput, facturaUncheckedCreateWithoutInstitucionInput> | facturaCreateWithoutInstitucionInput[] | facturaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: facturaCreateOrConnectWithoutInstitucionInput | facturaCreateOrConnectWithoutInstitucionInput[]
    upsert?: facturaUpsertWithWhereUniqueWithoutInstitucionInput | facturaUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: facturaCreateManyInstitucionInputEnvelope
    set?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    disconnect?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    delete?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    connect?: facturaWhereUniqueInput | facturaWhereUniqueInput[]
    update?: facturaUpdateWithWhereUniqueWithoutInstitucionInput | facturaUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: facturaUpdateManyWithWhereWithoutInstitucionInput | facturaUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: facturaScalarWhereInput | facturaScalarWhereInput[]
  }

  export type cotizacionesUncheckedUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<cotizacionesCreateWithoutInstitucionInput, cotizacionesUncheckedCreateWithoutInstitucionInput> | cotizacionesCreateWithoutInstitucionInput[] | cotizacionesUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: cotizacionesCreateOrConnectWithoutInstitucionInput | cotizacionesCreateOrConnectWithoutInstitucionInput[]
    upsert?: cotizacionesUpsertWithWhereUniqueWithoutInstitucionInput | cotizacionesUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: cotizacionesCreateManyInstitucionInputEnvelope
    set?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    disconnect?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    delete?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    connect?: cotizacionesWhereUniqueInput | cotizacionesWhereUniqueInput[]
    update?: cotizacionesUpdateWithWhereUniqueWithoutInstitucionInput | cotizacionesUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: cotizacionesUpdateManyWithWhereWithoutInstitucionInput | cotizacionesUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: cotizacionesScalarWhereInput | cotizacionesScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutHistorial_operacionesInput = {
    create?: XOR<usuarioCreateWithoutHistorial_operacionesInput, usuarioUncheckedCreateWithoutHistorial_operacionesInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutHistorial_operacionesInput
    connect?: usuarioWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usuarioUpdateOneRequiredWithoutHistorial_operacionesNestedInput = {
    create?: XOR<usuarioCreateWithoutHistorial_operacionesInput, usuarioUncheckedCreateWithoutHistorial_operacionesInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutHistorial_operacionesInput
    upsert?: usuarioUpsertWithoutHistorial_operacionesInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutHistorial_operacionesInput, usuarioUpdateWithoutHistorial_operacionesInput>, usuarioUncheckedUpdateWithoutHistorial_operacionesInput>
  }

  export type consignacionesCreateNestedManyWithoutInventarioInput = {
    create?: XOR<consignacionesCreateWithoutInventarioInput, consignacionesUncheckedCreateWithoutInventarioInput> | consignacionesCreateWithoutInventarioInput[] | consignacionesUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInventarioInput | consignacionesCreateOrConnectWithoutInventarioInput[]
    createMany?: consignacionesCreateManyInventarioInputEnvelope
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
  }

  export type consignacionesUncheckedCreateNestedManyWithoutInventarioInput = {
    create?: XOR<consignacionesCreateWithoutInventarioInput, consignacionesUncheckedCreateWithoutInventarioInput> | consignacionesCreateWithoutInventarioInput[] | consignacionesUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInventarioInput | consignacionesCreateOrConnectWithoutInventarioInput[]
    createMany?: consignacionesCreateManyInventarioInputEnvelope
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type consignacionesUpdateManyWithoutInventarioNestedInput = {
    create?: XOR<consignacionesCreateWithoutInventarioInput, consignacionesUncheckedCreateWithoutInventarioInput> | consignacionesCreateWithoutInventarioInput[] | consignacionesUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInventarioInput | consignacionesCreateOrConnectWithoutInventarioInput[]
    upsert?: consignacionesUpsertWithWhereUniqueWithoutInventarioInput | consignacionesUpsertWithWhereUniqueWithoutInventarioInput[]
    createMany?: consignacionesCreateManyInventarioInputEnvelope
    set?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    disconnect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    delete?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    update?: consignacionesUpdateWithWhereUniqueWithoutInventarioInput | consignacionesUpdateWithWhereUniqueWithoutInventarioInput[]
    updateMany?: consignacionesUpdateManyWithWhereWithoutInventarioInput | consignacionesUpdateManyWithWhereWithoutInventarioInput[]
    deleteMany?: consignacionesScalarWhereInput | consignacionesScalarWhereInput[]
  }

  export type consignacionesUncheckedUpdateManyWithoutInventarioNestedInput = {
    create?: XOR<consignacionesCreateWithoutInventarioInput, consignacionesUncheckedCreateWithoutInventarioInput> | consignacionesCreateWithoutInventarioInput[] | consignacionesUncheckedCreateWithoutInventarioInput[]
    connectOrCreate?: consignacionesCreateOrConnectWithoutInventarioInput | consignacionesCreateOrConnectWithoutInventarioInput[]
    upsert?: consignacionesUpsertWithWhereUniqueWithoutInventarioInput | consignacionesUpsertWithWhereUniqueWithoutInventarioInput[]
    createMany?: consignacionesCreateManyInventarioInputEnvelope
    set?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    disconnect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    delete?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    connect?: consignacionesWhereUniqueInput | consignacionesWhereUniqueInput[]
    update?: consignacionesUpdateWithWhereUniqueWithoutInventarioInput | consignacionesUpdateWithWhereUniqueWithoutInventarioInput[]
    updateMany?: consignacionesUpdateManyWithWhereWithoutInventarioInput | consignacionesUpdateManyWithWhereWithoutInventarioInput[]
    deleteMany?: consignacionesScalarWhereInput | consignacionesScalarWhereInput[]
  }

  export type inventarioCreateNestedOneWithoutConsignacionesInput = {
    create?: XOR<inventarioCreateWithoutConsignacionesInput, inventarioUncheckedCreateWithoutConsignacionesInput>
    connectOrCreate?: inventarioCreateOrConnectWithoutConsignacionesInput
    connect?: inventarioWhereUniqueInput
  }

  export type institucionCreateNestedOneWithoutConsignacionesInput = {
    create?: XOR<institucionCreateWithoutConsignacionesInput, institucionUncheckedCreateWithoutConsignacionesInput>
    connectOrCreate?: institucionCreateOrConnectWithoutConsignacionesInput
    connect?: institucionWhereUniqueInput
  }

  export type inventarioUpdateOneRequiredWithoutConsignacionesNestedInput = {
    create?: XOR<inventarioCreateWithoutConsignacionesInput, inventarioUncheckedCreateWithoutConsignacionesInput>
    connectOrCreate?: inventarioCreateOrConnectWithoutConsignacionesInput
    upsert?: inventarioUpsertWithoutConsignacionesInput
    connect?: inventarioWhereUniqueInput
    update?: XOR<XOR<inventarioUpdateToOneWithWhereWithoutConsignacionesInput, inventarioUpdateWithoutConsignacionesInput>, inventarioUncheckedUpdateWithoutConsignacionesInput>
  }

  export type institucionUpdateOneRequiredWithoutConsignacionesNestedInput = {
    create?: XOR<institucionCreateWithoutConsignacionesInput, institucionUncheckedCreateWithoutConsignacionesInput>
    connectOrCreate?: institucionCreateOrConnectWithoutConsignacionesInput
    upsert?: institucionUpsertWithoutConsignacionesInput
    connect?: institucionWhereUniqueInput
    update?: XOR<XOR<institucionUpdateToOneWithWhereWithoutConsignacionesInput, institucionUpdateWithoutConsignacionesInput>, institucionUncheckedUpdateWithoutConsignacionesInput>
  }

  export type detalle_articulosListCreateEnvelopeInput = {
    set?: detalle_articulosCreateInput | detalle_articulosCreateInput[]
  }

  export type detalle_articulosCreateInput = {
    id_inventario: string
    cantidad: string
    precio_unitario: string
    precio_total: string
  }

  export type institucionCreateNestedOneWithoutFacturaInput = {
    create?: XOR<institucionCreateWithoutFacturaInput, institucionUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: institucionCreateOrConnectWithoutFacturaInput
    connect?: institucionWhereUniqueInput
  }

  export type detalle_articulosListUpdateEnvelopeInput = {
    set?: detalle_articulosCreateInput | detalle_articulosCreateInput[]
    push?: detalle_articulosCreateInput | detalle_articulosCreateInput[]
    updateMany?: detalle_articulosUpdateManyInput
    deleteMany?: detalle_articulosDeleteManyInput
  }

  export type institucionUpdateOneRequiredWithoutFacturaNestedInput = {
    create?: XOR<institucionCreateWithoutFacturaInput, institucionUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: institucionCreateOrConnectWithoutFacturaInput
    upsert?: institucionUpsertWithoutFacturaInput
    connect?: institucionWhereUniqueInput
    update?: XOR<XOR<institucionUpdateToOneWithWhereWithoutFacturaInput, institucionUpdateWithoutFacturaInput>, institucionUncheckedUpdateWithoutFacturaInput>
  }

  export type aprobado_porNullableCreateEnvelopeInput = {
    set?: aprobado_porCreateInput | null
  }

  export type aprobado_porCreateInput = {
    id_usuario: string
    nombre: string
    fecha_aprobacion?: Date | string
  }

  export type institucionCreateNestedOneWithoutCotizacionesInput = {
    create?: XOR<institucionCreateWithoutCotizacionesInput, institucionUncheckedCreateWithoutCotizacionesInput>
    connectOrCreate?: institucionCreateOrConnectWithoutCotizacionesInput
    connect?: institucionWhereUniqueInput
  }

  export type aprobado_porNullableUpdateEnvelopeInput = {
    set?: aprobado_porCreateInput | null
    upsert?: aprobado_porUpsertInput
    unset?: boolean
  }

  export type institucionUpdateOneRequiredWithoutCotizacionesNestedInput = {
    create?: XOR<institucionCreateWithoutCotizacionesInput, institucionUncheckedCreateWithoutCotizacionesInput>
    connectOrCreate?: institucionCreateOrConnectWithoutCotizacionesInput
    upsert?: institucionUpsertWithoutCotizacionesInput
    connect?: institucionWhereUniqueInput
    update?: XOR<XOR<institucionUpdateToOneWithWhereWithoutCotizacionesInput, institucionUpdateWithoutCotizacionesInput>, institucionUncheckedUpdateWithoutCotizacionesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type detalle_articulosWhereInput = {
    AND?: detalle_articulosWhereInput | detalle_articulosWhereInput[]
    OR?: detalle_articulosWhereInput[]
    NOT?: detalle_articulosWhereInput | detalle_articulosWhereInput[]
    id_inventario?: StringFilter<"detalle_articulos"> | string
    cantidad?: StringFilter<"detalle_articulos"> | string
    precio_unitario?: StringFilter<"detalle_articulos"> | string
    precio_total?: StringFilter<"detalle_articulos"> | string
  }

  export type aprobado_porWhereInput = {
    AND?: aprobado_porWhereInput | aprobado_porWhereInput[]
    OR?: aprobado_porWhereInput[]
    NOT?: aprobado_porWhereInput | aprobado_porWhereInput[]
    id_usuario?: StringFilter<"aprobado_por"> | string
    nombre?: StringFilter<"aprobado_por"> | string
    fecha_aprobacion?: DateTimeFilter<"aprobado_por"> | Date | string
  }

  export type historial_operacionesCreateWithoutUsuarioInput = {
    id?: string
    accion: string
    fecha?: Date | string
    recurso: string
    detalle: string
  }

  export type historial_operacionesUncheckedCreateWithoutUsuarioInput = {
    id?: string
    accion: string
    fecha?: Date | string
    recurso: string
    detalle: string
  }

  export type historial_operacionesCreateOrConnectWithoutUsuarioInput = {
    where: historial_operacionesWhereUniqueInput
    create: XOR<historial_operacionesCreateWithoutUsuarioInput, historial_operacionesUncheckedCreateWithoutUsuarioInput>
  }

  export type historial_operacionesCreateManyUsuarioInputEnvelope = {
    data: historial_operacionesCreateManyUsuarioInput | historial_operacionesCreateManyUsuarioInput[]
  }

  export type historial_operacionesUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: historial_operacionesWhereUniqueInput
    update: XOR<historial_operacionesUpdateWithoutUsuarioInput, historial_operacionesUncheckedUpdateWithoutUsuarioInput>
    create: XOR<historial_operacionesCreateWithoutUsuarioInput, historial_operacionesUncheckedCreateWithoutUsuarioInput>
  }

  export type historial_operacionesUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: historial_operacionesWhereUniqueInput
    data: XOR<historial_operacionesUpdateWithoutUsuarioInput, historial_operacionesUncheckedUpdateWithoutUsuarioInput>
  }

  export type historial_operacionesUpdateManyWithWhereWithoutUsuarioInput = {
    where: historial_operacionesScalarWhereInput
    data: XOR<historial_operacionesUpdateManyMutationInput, historial_operacionesUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type historial_operacionesScalarWhereInput = {
    AND?: historial_operacionesScalarWhereInput | historial_operacionesScalarWhereInput[]
    OR?: historial_operacionesScalarWhereInput[]
    NOT?: historial_operacionesScalarWhereInput | historial_operacionesScalarWhereInput[]
    id?: StringFilter<"historial_operaciones"> | string
    accion?: StringFilter<"historial_operaciones"> | string
    fecha?: DateTimeFilter<"historial_operaciones"> | Date | string
    id_usuario?: StringFilter<"historial_operaciones"> | string
    recurso?: StringFilter<"historial_operaciones"> | string
    detalle?: StringFilter<"historial_operaciones"> | string
  }

  export type consignacionesCreateWithoutInstitucionInput = {
    id?: string
    fecha?: Date | string
    cantidad: number
    estado: string
    id_usuario: string
    inventario: inventarioCreateNestedOneWithoutConsignacionesInput
  }

  export type consignacionesUncheckedCreateWithoutInstitucionInput = {
    id?: string
    fecha?: Date | string
    id_libro: string
    cantidad: number
    estado: string
    id_usuario: string
  }

  export type consignacionesCreateOrConnectWithoutInstitucionInput = {
    where: consignacionesWhereUniqueInput
    create: XOR<consignacionesCreateWithoutInstitucionInput, consignacionesUncheckedCreateWithoutInstitucionInput>
  }

  export type consignacionesCreateManyInstitucionInputEnvelope = {
    data: consignacionesCreateManyInstitucionInput | consignacionesCreateManyInstitucionInput[]
  }

  export type facturaCreateWithoutInstitucionInput = {
    id?: string
    fecha?: Date | string
    num_factura: number
    tipo_documento: string
    articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: number | null
    id_usuario: string
    estado: string
  }

  export type facturaUncheckedCreateWithoutInstitucionInput = {
    id?: string
    fecha?: Date | string
    num_factura: number
    tipo_documento: string
    articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: number | null
    id_usuario: string
    estado: string
  }

  export type facturaCreateOrConnectWithoutInstitucionInput = {
    where: facturaWhereUniqueInput
    create: XOR<facturaCreateWithoutInstitucionInput, facturaUncheckedCreateWithoutInstitucionInput>
  }

  export type facturaCreateManyInstitucionInputEnvelope = {
    data: facturaCreateManyInstitucionInput | facturaCreateManyInstitucionInput[]
  }

  export type cotizacionesCreateWithoutInstitucionInput = {
    id?: string
    fecha?: Date | string
    detalle_articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita: string
    estado: string
    aprobado_por?: XOR<aprobado_porNullableCreateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesUncheckedCreateWithoutInstitucionInput = {
    id?: string
    fecha?: Date | string
    detalle_articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita: string
    estado: string
    aprobado_por?: XOR<aprobado_porNullableCreateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesCreateOrConnectWithoutInstitucionInput = {
    where: cotizacionesWhereUniqueInput
    create: XOR<cotizacionesCreateWithoutInstitucionInput, cotizacionesUncheckedCreateWithoutInstitucionInput>
  }

  export type cotizacionesCreateManyInstitucionInputEnvelope = {
    data: cotizacionesCreateManyInstitucionInput | cotizacionesCreateManyInstitucionInput[]
  }

  export type consignacionesUpsertWithWhereUniqueWithoutInstitucionInput = {
    where: consignacionesWhereUniqueInput
    update: XOR<consignacionesUpdateWithoutInstitucionInput, consignacionesUncheckedUpdateWithoutInstitucionInput>
    create: XOR<consignacionesCreateWithoutInstitucionInput, consignacionesUncheckedCreateWithoutInstitucionInput>
  }

  export type consignacionesUpdateWithWhereUniqueWithoutInstitucionInput = {
    where: consignacionesWhereUniqueInput
    data: XOR<consignacionesUpdateWithoutInstitucionInput, consignacionesUncheckedUpdateWithoutInstitucionInput>
  }

  export type consignacionesUpdateManyWithWhereWithoutInstitucionInput = {
    where: consignacionesScalarWhereInput
    data: XOR<consignacionesUpdateManyMutationInput, consignacionesUncheckedUpdateManyWithoutInstitucionInput>
  }

  export type consignacionesScalarWhereInput = {
    AND?: consignacionesScalarWhereInput | consignacionesScalarWhereInput[]
    OR?: consignacionesScalarWhereInput[]
    NOT?: consignacionesScalarWhereInput | consignacionesScalarWhereInput[]
    id?: StringFilter<"consignaciones"> | string
    fecha?: DateTimeFilter<"consignaciones"> | Date | string
    id_libro?: StringFilter<"consignaciones"> | string
    cantidad?: IntFilter<"consignaciones"> | number
    estado?: StringFilter<"consignaciones"> | string
    id_usuario?: StringFilter<"consignaciones"> | string
    id_institucion?: StringFilter<"consignaciones"> | string
  }

  export type facturaUpsertWithWhereUniqueWithoutInstitucionInput = {
    where: facturaWhereUniqueInput
    update: XOR<facturaUpdateWithoutInstitucionInput, facturaUncheckedUpdateWithoutInstitucionInput>
    create: XOR<facturaCreateWithoutInstitucionInput, facturaUncheckedCreateWithoutInstitucionInput>
  }

  export type facturaUpdateWithWhereUniqueWithoutInstitucionInput = {
    where: facturaWhereUniqueInput
    data: XOR<facturaUpdateWithoutInstitucionInput, facturaUncheckedUpdateWithoutInstitucionInput>
  }

  export type facturaUpdateManyWithWhereWithoutInstitucionInput = {
    where: facturaScalarWhereInput
    data: XOR<facturaUpdateManyMutationInput, facturaUncheckedUpdateManyWithoutInstitucionInput>
  }

  export type facturaScalarWhereInput = {
    AND?: facturaScalarWhereInput | facturaScalarWhereInput[]
    OR?: facturaScalarWhereInput[]
    NOT?: facturaScalarWhereInput | facturaScalarWhereInput[]
    id?: StringFilter<"factura"> | string
    fecha?: DateTimeFilter<"factura"> | Date | string
    num_factura?: IntFilter<"factura"> | number
    tipo_documento?: StringFilter<"factura"> | string
    id_institucion?: StringFilter<"factura"> | string
    descuento?: FloatNullableFilter<"factura"> | number | null
    id_usuario?: StringFilter<"factura"> | string
    estado?: StringFilter<"factura"> | string
  }

  export type cotizacionesUpsertWithWhereUniqueWithoutInstitucionInput = {
    where: cotizacionesWhereUniqueInput
    update: XOR<cotizacionesUpdateWithoutInstitucionInput, cotizacionesUncheckedUpdateWithoutInstitucionInput>
    create: XOR<cotizacionesCreateWithoutInstitucionInput, cotizacionesUncheckedCreateWithoutInstitucionInput>
  }

  export type cotizacionesUpdateWithWhereUniqueWithoutInstitucionInput = {
    where: cotizacionesWhereUniqueInput
    data: XOR<cotizacionesUpdateWithoutInstitucionInput, cotizacionesUncheckedUpdateWithoutInstitucionInput>
  }

  export type cotizacionesUpdateManyWithWhereWithoutInstitucionInput = {
    where: cotizacionesScalarWhereInput
    data: XOR<cotizacionesUpdateManyMutationInput, cotizacionesUncheckedUpdateManyWithoutInstitucionInput>
  }

  export type cotizacionesScalarWhereInput = {
    AND?: cotizacionesScalarWhereInput | cotizacionesScalarWhereInput[]
    OR?: cotizacionesScalarWhereInput[]
    NOT?: cotizacionesScalarWhereInput | cotizacionesScalarWhereInput[]
    id?: StringFilter<"cotizaciones"> | string
    fecha?: DateTimeFilter<"cotizaciones"> | Date | string
    id_institucion?: StringFilter<"cotizaciones"> | string
    id_usuario_solicita?: StringFilter<"cotizaciones"> | string
    estado?: StringFilter<"cotizaciones"> | string
  }

  export type usuarioCreateWithoutHistorial_operacionesInput = {
    id?: string
    email: string
    rol?: string | null
    nombre: string
    apellido: string
    contrasena: string
  }

  export type usuarioUncheckedCreateWithoutHistorial_operacionesInput = {
    id?: string
    email: string
    rol?: string | null
    nombre: string
    apellido: string
    contrasena: string
  }

  export type usuarioCreateOrConnectWithoutHistorial_operacionesInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutHistorial_operacionesInput, usuarioUncheckedCreateWithoutHistorial_operacionesInput>
  }

  export type usuarioUpsertWithoutHistorial_operacionesInput = {
    update: XOR<usuarioUpdateWithoutHistorial_operacionesInput, usuarioUncheckedUpdateWithoutHistorial_operacionesInput>
    create: XOR<usuarioCreateWithoutHistorial_operacionesInput, usuarioUncheckedCreateWithoutHistorial_operacionesInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutHistorial_operacionesInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutHistorial_operacionesInput, usuarioUncheckedUpdateWithoutHistorial_operacionesInput>
  }

  export type usuarioUpdateWithoutHistorial_operacionesInput = {
    email?: StringFieldUpdateOperationsInput | string
    rol?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUncheckedUpdateWithoutHistorial_operacionesInput = {
    email?: StringFieldUpdateOperationsInput | string
    rol?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
  }

  export type consignacionesCreateWithoutInventarioInput = {
    id?: string
    fecha?: Date | string
    cantidad: number
    estado: string
    id_usuario: string
    institucion: institucionCreateNestedOneWithoutConsignacionesInput
  }

  export type consignacionesUncheckedCreateWithoutInventarioInput = {
    id?: string
    fecha?: Date | string
    cantidad: number
    estado: string
    id_usuario: string
    id_institucion: string
  }

  export type consignacionesCreateOrConnectWithoutInventarioInput = {
    where: consignacionesWhereUniqueInput
    create: XOR<consignacionesCreateWithoutInventarioInput, consignacionesUncheckedCreateWithoutInventarioInput>
  }

  export type consignacionesCreateManyInventarioInputEnvelope = {
    data: consignacionesCreateManyInventarioInput | consignacionesCreateManyInventarioInput[]
  }

  export type consignacionesUpsertWithWhereUniqueWithoutInventarioInput = {
    where: consignacionesWhereUniqueInput
    update: XOR<consignacionesUpdateWithoutInventarioInput, consignacionesUncheckedUpdateWithoutInventarioInput>
    create: XOR<consignacionesCreateWithoutInventarioInput, consignacionesUncheckedCreateWithoutInventarioInput>
  }

  export type consignacionesUpdateWithWhereUniqueWithoutInventarioInput = {
    where: consignacionesWhereUniqueInput
    data: XOR<consignacionesUpdateWithoutInventarioInput, consignacionesUncheckedUpdateWithoutInventarioInput>
  }

  export type consignacionesUpdateManyWithWhereWithoutInventarioInput = {
    where: consignacionesScalarWhereInput
    data: XOR<consignacionesUpdateManyMutationInput, consignacionesUncheckedUpdateManyWithoutInventarioInput>
  }

  export type inventarioCreateWithoutConsignacionesInput = {
    id?: string
    isbn: number
    editorial: string
    titulo: string
    cantidad: number
    precio_unitario: number
  }

  export type inventarioUncheckedCreateWithoutConsignacionesInput = {
    id?: string
    isbn: number
    editorial: string
    titulo: string
    cantidad: number
    precio_unitario: number
  }

  export type inventarioCreateOrConnectWithoutConsignacionesInput = {
    where: inventarioWhereUniqueInput
    create: XOR<inventarioCreateWithoutConsignacionesInput, inventarioUncheckedCreateWithoutConsignacionesInput>
  }

  export type institucionCreateWithoutConsignacionesInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    factura?: facturaCreateNestedManyWithoutInstitucionInput
    cotizaciones?: cotizacionesCreateNestedManyWithoutInstitucionInput
  }

  export type institucionUncheckedCreateWithoutConsignacionesInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    factura?: facturaUncheckedCreateNestedManyWithoutInstitucionInput
    cotizaciones?: cotizacionesUncheckedCreateNestedManyWithoutInstitucionInput
  }

  export type institucionCreateOrConnectWithoutConsignacionesInput = {
    where: institucionWhereUniqueInput
    create: XOR<institucionCreateWithoutConsignacionesInput, institucionUncheckedCreateWithoutConsignacionesInput>
  }

  export type inventarioUpsertWithoutConsignacionesInput = {
    update: XOR<inventarioUpdateWithoutConsignacionesInput, inventarioUncheckedUpdateWithoutConsignacionesInput>
    create: XOR<inventarioCreateWithoutConsignacionesInput, inventarioUncheckedCreateWithoutConsignacionesInput>
    where?: inventarioWhereInput
  }

  export type inventarioUpdateToOneWithWhereWithoutConsignacionesInput = {
    where?: inventarioWhereInput
    data: XOR<inventarioUpdateWithoutConsignacionesInput, inventarioUncheckedUpdateWithoutConsignacionesInput>
  }

  export type inventarioUpdateWithoutConsignacionesInput = {
    isbn?: IntFieldUpdateOperationsInput | number
    editorial?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type inventarioUncheckedUpdateWithoutConsignacionesInput = {
    isbn?: IntFieldUpdateOperationsInput | number
    editorial?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_unitario?: FloatFieldUpdateOperationsInput | number
  }

  export type institucionUpsertWithoutConsignacionesInput = {
    update: XOR<institucionUpdateWithoutConsignacionesInput, institucionUncheckedUpdateWithoutConsignacionesInput>
    create: XOR<institucionCreateWithoutConsignacionesInput, institucionUncheckedCreateWithoutConsignacionesInput>
    where?: institucionWhereInput
  }

  export type institucionUpdateToOneWithWhereWithoutConsignacionesInput = {
    where?: institucionWhereInput
    data: XOR<institucionUpdateWithoutConsignacionesInput, institucionUncheckedUpdateWithoutConsignacionesInput>
  }

  export type institucionUpdateWithoutConsignacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    factura?: facturaUpdateManyWithoutInstitucionNestedInput
    cotizaciones?: cotizacionesUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionUncheckedUpdateWithoutConsignacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    factura?: facturaUncheckedUpdateManyWithoutInstitucionNestedInput
    cotizaciones?: cotizacionesUncheckedUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionCreateWithoutFacturaInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    consignaciones?: consignacionesCreateNestedManyWithoutInstitucionInput
    cotizaciones?: cotizacionesCreateNestedManyWithoutInstitucionInput
  }

  export type institucionUncheckedCreateWithoutFacturaInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    consignaciones?: consignacionesUncheckedCreateNestedManyWithoutInstitucionInput
    cotizaciones?: cotizacionesUncheckedCreateNestedManyWithoutInstitucionInput
  }

  export type institucionCreateOrConnectWithoutFacturaInput = {
    where: institucionWhereUniqueInput
    create: XOR<institucionCreateWithoutFacturaInput, institucionUncheckedCreateWithoutFacturaInput>
  }

  export type detalle_articulosUpdateManyInput = {
    where: detalle_articulosWhereInput
    data: detalle_articulosUpdateInput
  }

  export type detalle_articulosDeleteManyInput = {
    where: detalle_articulosWhereInput
  }

  export type institucionUpsertWithoutFacturaInput = {
    update: XOR<institucionUpdateWithoutFacturaInput, institucionUncheckedUpdateWithoutFacturaInput>
    create: XOR<institucionCreateWithoutFacturaInput, institucionUncheckedCreateWithoutFacturaInput>
    where?: institucionWhereInput
  }

  export type institucionUpdateToOneWithWhereWithoutFacturaInput = {
    where?: institucionWhereInput
    data: XOR<institucionUpdateWithoutFacturaInput, institucionUncheckedUpdateWithoutFacturaInput>
  }

  export type institucionUpdateWithoutFacturaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    consignaciones?: consignacionesUpdateManyWithoutInstitucionNestedInput
    cotizaciones?: cotizacionesUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionUncheckedUpdateWithoutFacturaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    consignaciones?: consignacionesUncheckedUpdateManyWithoutInstitucionNestedInput
    cotizaciones?: cotizacionesUncheckedUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionCreateWithoutCotizacionesInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    consignaciones?: consignacionesCreateNestedManyWithoutInstitucionInput
    factura?: facturaCreateNestedManyWithoutInstitucionInput
  }

  export type institucionUncheckedCreateWithoutCotizacionesInput = {
    id?: string
    nombre: string
    direccion: string
    contacto_principal: string
    tel_contacto_principal: string
    contacto_secundario?: string | null
    tel_contacto_secundario?: string | null
    porcentaje_descuento?: number | null
    consignaciones?: consignacionesUncheckedCreateNestedManyWithoutInstitucionInput
    factura?: facturaUncheckedCreateNestedManyWithoutInstitucionInput
  }

  export type institucionCreateOrConnectWithoutCotizacionesInput = {
    where: institucionWhereUniqueInput
    create: XOR<institucionCreateWithoutCotizacionesInput, institucionUncheckedCreateWithoutCotizacionesInput>
  }

  export type aprobado_porUpsertInput = {
    set: aprobado_porCreateInput | null
    update: aprobado_porUpdateInput
  }

  export type institucionUpsertWithoutCotizacionesInput = {
    update: XOR<institucionUpdateWithoutCotizacionesInput, institucionUncheckedUpdateWithoutCotizacionesInput>
    create: XOR<institucionCreateWithoutCotizacionesInput, institucionUncheckedCreateWithoutCotizacionesInput>
    where?: institucionWhereInput
  }

  export type institucionUpdateToOneWithWhereWithoutCotizacionesInput = {
    where?: institucionWhereInput
    data: XOR<institucionUpdateWithoutCotizacionesInput, institucionUncheckedUpdateWithoutCotizacionesInput>
  }

  export type institucionUpdateWithoutCotizacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    consignaciones?: consignacionesUpdateManyWithoutInstitucionNestedInput
    factura?: facturaUpdateManyWithoutInstitucionNestedInput
  }

  export type institucionUncheckedUpdateWithoutCotizacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    contacto_principal?: StringFieldUpdateOperationsInput | string
    tel_contacto_principal?: StringFieldUpdateOperationsInput | string
    contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    tel_contacto_secundario?: NullableStringFieldUpdateOperationsInput | string | null
    porcentaje_descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    consignaciones?: consignacionesUncheckedUpdateManyWithoutInstitucionNestedInput
    factura?: facturaUncheckedUpdateManyWithoutInstitucionNestedInput
  }

  export type historial_operacionesCreateManyUsuarioInput = {
    id?: string
    accion: string
    fecha?: Date | string
    recurso: string
    detalle: string
  }

  export type historial_operacionesUpdateWithoutUsuarioInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
  }

  export type historial_operacionesUncheckedUpdateWithoutUsuarioInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
  }

  export type historial_operacionesUncheckedUpdateManyWithoutUsuarioInput = {
    accion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    recurso?: StringFieldUpdateOperationsInput | string
    detalle?: StringFieldUpdateOperationsInput | string
  }

  export type consignacionesCreateManyInstitucionInput = {
    id?: string
    fecha?: Date | string
    id_libro: string
    cantidad: number
    estado: string
    id_usuario: string
  }

  export type facturaCreateManyInstitucionInput = {
    id?: string
    fecha?: Date | string
    num_factura: number
    tipo_documento: string
    articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: number | null
    id_usuario: string
    estado: string
  }

  export type cotizacionesCreateManyInstitucionInput = {
    id?: string
    fecha?: Date | string
    detalle_articulos?: XOR<detalle_articulosListCreateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita: string
    estado: string
    aprobado_por?: XOR<aprobado_porNullableCreateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type consignacionesUpdateWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    inventario?: inventarioUpdateOneRequiredWithoutConsignacionesNestedInput
  }

  export type consignacionesUncheckedUpdateWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_libro?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
  }

  export type consignacionesUncheckedUpdateManyWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    id_libro?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
  }

  export type facturaUpdateWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type facturaUncheckedUpdateWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type facturaUncheckedUpdateManyWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    num_factura?: IntFieldUpdateOperationsInput | number
    tipo_documento?: StringFieldUpdateOperationsInput | string
    articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    descuento?: NullableFloatFieldUpdateOperationsInput | number | null
    id_usuario?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type cotizacionesUpdateWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesUncheckedUpdateWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type cotizacionesUncheckedUpdateManyWithoutInstitucionInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    detalle_articulos?: XOR<detalle_articulosListUpdateEnvelopeInput, detalle_articulosCreateInput> | detalle_articulosCreateInput[]
    id_usuario_solicita?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    aprobado_por?: XOR<aprobado_porNullableUpdateEnvelopeInput, aprobado_porCreateInput> | null
  }

  export type consignacionesCreateManyInventarioInput = {
    id?: string
    fecha?: Date | string
    cantidad: number
    estado: string
    id_usuario: string
    id_institucion: string
  }

  export type consignacionesUpdateWithoutInventarioInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    institucion?: institucionUpdateOneRequiredWithoutConsignacionesNestedInput
  }

  export type consignacionesUncheckedUpdateWithoutInventarioInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    id_institucion?: StringFieldUpdateOperationsInput | string
  }

  export type consignacionesUncheckedUpdateManyWithoutInventarioInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cantidad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    id_usuario?: StringFieldUpdateOperationsInput | string
    id_institucion?: StringFieldUpdateOperationsInput | string
  }

  export type detalle_articulosUpdateInput = {
    id_inventario?: StringFieldUpdateOperationsInput | string
    cantidad?: StringFieldUpdateOperationsInput | string
    precio_unitario?: StringFieldUpdateOperationsInput | string
    precio_total?: StringFieldUpdateOperationsInput | string
  }

  export type aprobado_porUpdateInput = {
    id_usuario?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_aprobacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstitucionCountOutputTypeDefaultArgs instead
     */
    export type InstitucionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstitucionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventarioCountOutputTypeDefaultArgs instead
     */
    export type InventarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use detalle_articulosDefaultArgs instead
     */
    export type detalle_articulosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = detalle_articulosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use aprobado_porDefaultArgs instead
     */
    export type aprobado_porArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = aprobado_porDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use institucionDefaultArgs instead
     */
    export type institucionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = institucionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use historial_operacionesDefaultArgs instead
     */
    export type historial_operacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = historial_operacionesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use inventarioDefaultArgs instead
     */
    export type inventarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = inventarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use consignacionesDefaultArgs instead
     */
    export type consignacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = consignacionesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use facturaDefaultArgs instead
     */
    export type facturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = facturaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cotizacionesDefaultArgs instead
     */
    export type cotizacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cotizacionesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}